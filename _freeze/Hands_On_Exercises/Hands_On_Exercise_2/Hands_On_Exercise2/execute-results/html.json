{
  "hash": "84d2f4b7894f51d301fe47e50ab176e1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Thematic Mapping and GeoVisualisation with R\"\nauthor: \"Jiale SO\"\ndate: \"August 22, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\nUsing TMap, we will learn how to plot functional and truthful choropleth maps. Through Geo visualization, we allow our audiences to understand the dataset easier with their spatial cognition.\n\n# 1.0 Setting up the Environment\n\nLikewise in Chapter 1, we set up the environment by installing all the required packages. We can do so using the `p_load` function from the Pacman Package.\n\nA total of 5 packages will be used:\n\n-   [**readr**](https://readr.tidyverse.org/) for importing delimited text files,\n-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,\n-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and\n-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.\n-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) for creating geovisualizations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse, dplyr, gridExtra, grid)\n```\n:::\n\n\n# 2.0 Importing the Data into R\n\nTwo Data Set will be used here, we can retrieve it by simply clicking on the link.\n\n1.  [Singapore Population Size](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data). This is an aspatial dataset that does not contain coordinate values. However, it includes \"PA\" (Planning Area) and \"SZ\" (Subzone) fields that can be linked to another dataset to identify the geographical areas.\n\n2.  [Singapore Map](https://beta.data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary&resultId=d_d14da225fccf921049ab64238ff473d9), This dataset is used to create the base layer of the choropleth map. It contains the geographical boundaries of Singapore at the planning subzone level and is stored as an ESRI shapefile.\n\n## 2.1 Importing the Geo-spatial Data\n\nSimply use the `st_read()` function to import the shapefile into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\Users\\jiale\\Desktop\\IS415\\IS415-GAA\\Hands_On_Exercises\\Hands_On_Exercise_2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n### 2.1.1 Understanding the data\n\nWe can easily examine the content of `mpsz` by calling the variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\n> Question -\\> Notice that only the first ten records will be displayed. Do you know why?\n\nOnly 10 records are shown because displaying a subset of rows makes it easier to inspect the data without loading the entire dataset. This optimization helps improve processing time for large datasets. Often, these first 10 records provide users with a quick preview of the dataset.\n\nRemember, we can always explore the content of `mpsz` using the following functions. If we want to preview more than 10 records, we can simply use `head(mpsz, 20)` to view more rows.\n\n-   **`st_geometry`**: Prints basic information about the feature class, such as the type of geometry.\n\n-   **`glimpse`**: Displays associated attribute information in the data frame.\n\n-   **`head`**: Reveals complete information of a feature object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(mpsz, n = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 20 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 8012.578 ymin: 15748.72 xmax: 33316.59 ymax: 31081.67\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\nThrough glimpse and head, we can map the following columns to their description for ease of use.\n\n| **Variable Name** | **Description**                                                               | **Cluster (Y/N)** | **Data Type / Example Values**                                                         |\n|------------------|------------------|------------------|-------------------|\n| OBJECTID          | Unique identifier for each row in the dataset.                                | N                 | `<int>` 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, …                                               |\n| SUBZONE_NO        | Numeric code representing the specific subzone within the planning area.      | Y                 | `<int>` 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, …                                               |\n| SUBZONE_N         | The name of the subzone (e.g., \"MARINA SOUTH,\" \"PEARL'S HILL\").               | Y                 | `<chr>` \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", …                                 |\n| SUBZONE_C         | Short code representing the subzone, typically an abbreviation.               | Y                 | `<chr>` \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", …                                      |\n| CA_IND            | Indicates if the subzone is a Central Area subzone (\"Y\" for Yes, \"N\" for No). | Y                 | `<chr>` \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", …                                           |\n| PLN_AREA_N        | The name of the planning area that the subzone belongs to (e.g., \"OUTRAM\").   | Y                 | `<chr>` \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", …                                 |\n| PLN_AREA_C        | Short code representing the planning area (abbreviation).                     | Y                 | `<chr>` \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", …                                          |\n| REGION_N          | The name of the broader region (e.g., \"CENTRAL REGION,\" \"WEST REGION\").       | Y                 | `<chr>` \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", …                        |\n| REGION_C          | Short code representing the region (e.g., \"CR\" for Central Region).           | Y                 | `<chr>` \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", …                                          |\n| INC_CRC           | Internal checksum code for data integrity; not relevant for clustering.       | N                 | `<chr>` \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\", …                  |\n| FMEL_UPD_D        | Date when the data was last updated (e.g., \"2014-12-05\").                     | N                 | `<date>` 2014-12-05, 2014-12-05, 2014-12-05, …                                         |\n| X_ADDR            | X coordinate of the subzone's centroid or key location.                       | Y                 | `<dbl>` 31595.84, 28679.06, 29654.96, …                                                |\n| Y_ADDR            | Y coordinate of the subzone's centroid or key location.                       | Y                 | `<dbl>` 29220.19, 29782.05, 29974.66, …                                                |\n| SHAPE_Leng        | The length of the subzone boundary (in meters).                               | Y                 | `<dbl>` 5267.381, 3506.107, 1740.926, …                                                |\n| SHAPE_Area        | The area of the subzone (in square meters).                                   | Y                 | `<dbl>` 1630379.27, 559816.25, 160807.50, …                                            |\n| geometry          | Geographic shape data (MULTIPOLYGON) representing the subzone's boundaries.   | Y                 | `<MULTIPOLYGON [m]>` MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (((29092.28 30..., … |\n\n## 2.2 Importing Attribute Data - Singapore Population Data\n\nWe can simply use the `read_csv` function from the `readr` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/respopagesextod2011to2020.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n### 2.2.1 Understanding the data\n\nWe can perform the same exploration to understand this data set, or simply refer to the data source website [here](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data). For a quick analysis, use `head()` and `glimpse()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(popdata, n = 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 7\n   PA         SZ                     AG     Sex     TOD                Pop  Time\n   <chr>      <chr>                  <chr>  <chr>   <chr>            <dbl> <dbl>\n 1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 1- and 2-Ro…     0  2011\n 2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 3-Room Flats    10  2011\n 3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 4-Room Flats    30  2011\n 4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HDB 5-Room and …    50  2011\n 5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   HUDC Flats (exc…     0  2011\n 6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Landed Properti…     0  2011\n 7 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Condominiums an…    40  2011\n 8 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males   Others               0  2011\n 9 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 1- and 2-Ro…     0  2011\n10 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 3-Room Flats    10  2011\n11 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 4-Room Flats    30  2011\n12 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HDB 5-Room and …    60  2011\n13 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females HUDC Flats (exc…     0  2011\n14 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females Landed Properti…     0  2011\n15 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females Condominiums an…    40  2011\n16 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Females Others               0  2011\n17 Ang Mo Kio Ang Mo Kio Town Centre 5_to_9 Males   HDB 1- and 2-Ro…     0  2011\n18 Ang Mo Kio Ang Mo Kio Town Centre 5_to_9 Males   HDB 3-Room Flats    10  2011\n19 Ang Mo Kio Ang Mo Kio Town Centre 5_to_9 Males   HDB 4-Room Flats    30  2011\n20 Ang Mo Kio Ang Mo Kio Town Centre 5_to_9 Males   HDB 5-Room and …    60  2011\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(popdata, n = 2000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 984,656\nColumns: 7\n$ PA   <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   <chr> \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ AG   <chr> \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to…\n$ Sex  <chr> \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"M…\n$ TOD  <chr> \"HDB 1- and 2-Room Flats\", \"HDB 3-Room Flats\", \"HDB 4-Room Flats\"…\n$ Pop  <dbl> 0, 10, 30, 50, 0, 0, 40, 0, 0, 10, 30, 60, 0, 0, 40, 0, 0, 10, 30…\n$ Time <dbl> 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011,…\n```\n\n\n:::\n:::\n\n\n| Column Name | Column Full Name | Description |\n|-------------|------------------|-------------|\n| PA          | Planning Area    |             |\n| SZ          | Subzone          |             |\n| AG          | Age Group        |             |\n| SEX         | Sex              |             |\n| TOD         | Type Of Dwelling |             |\n| POP         | Resident count   |             |\n| Time        | Time / Period    |             |\n\n### 2.2.2 **Data Preparation**\n\nBased on the data provided, we aim to create a thematic map focusing on 2020 values:\n\n**Clustering of age group**\n\n-   **YOUNG:** Age groups 0 to 4 until age groups 20 to 24.\n\n-   **ECONOMY ACTIVE:** Age groups 25-29 until age groups 60-64.\n\n-   **AGED:** Age groups 65 and above.\n\n-   **TOTAL:** All age groups combined.\n\n-   **DEPENDENCY:** The ratio of young and aged populations relative to the economy active population.\n\n\n::: {.cell}\n\n```{.text .cell-code}\nData Transformation Process\n1. First get all the possible agegroup in a variable.\n2. filter the data set for only 2020 values.\n2. Then from there group them base on young, which is 0~4 to 20~24. etc.\n4. Summarmise the data between the population\n5. Join the Datasetss with left join\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(popdata) # Get the colum names of the popdata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PA\"   \"SZ\"   \"AG\"   \"Sex\"  \"TOD\"  \"Pop\"  \"Time\"\n```\n\n\n:::\n\n```{.r .cell-code}\nage_categories <- unique(popdata$AG)\n\n#Step 1\nnames(popdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PA\"   \"SZ\"   \"AG\"   \"Sex\"  \"TOD\"  \"Pop\"  \"Time\"\n```\n\n\n:::\n\n```{.r .cell-code}\npopdata_2020 <- popdata[popdata$Time == 2020, ]\npopdata_2020 <- popdata_2020 %>%\n  mutate(\n    age_group = case_when(\n      AG %in% age_categories[1:5] ~ \"Young\",  # Age groups 0_to_4 until 20_to_24\n      AG %in% age_categories[6:13] ~ \"Economy Active\",  # Age groups 25_to_29 until 60_to_64\n      AG %in% age_categories[14:length(age_categories)] ~ \"Aged\",  # Age groups 65 and above\n      TRUE ~ \"Other\"\n    )\n  )\n\n# Step 2: Group by PA, SZ, and age_group, then sum the population\ngrouped_popdata <- popdata_2020 %>%\n  group_by(PA, SZ, age_group) %>%\n  summarise(total_population = sum(Pop, na.rm = TRUE)) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Step 3: Pivot the data to have separate columns for Young, Economy Active, and Aged\npivoted_data <- grouped_popdata %>%\n  pivot_wider(\n    names_from = age_group,\n    values_from = total_population,\n    values_fill = 0  # Fill missing values with 0\n  )\n\n# Step 4: Calculate TOTAL and DEPENDENCY columns\nfinal_data_2020 <- pivoted_data %>%\n  mutate(\n    TOTAL = Young + `Economy Active` + Aged,\n    DEPENDENCY = (Young + Aged) / `Economy Active`\n  )\n\n# Ensure all PA and SZ values are uppercase for consistency\nfinal_data_2020 <- final_data_2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper))\n\n#Step 5: Merge the spatial data with the population data\nmpsz_pop2020 <- left_join(mpsz, final_data_2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\n# 3.0 **Choropleth Mapping Geospatial Data Using *tmap***\n\nThis section provides an overview of key functions and concepts in `tmap`, focusing on the step-by-step process of building maps with progressively more complex elements. While the subsections dive into specific examples, this chapter highlights the core components used in choropleth mapping with `tmap`.\n\n## 3.1 Quick Thematic Map: `qtm()`\n\nThe `qtm()` function provides a fast and simple way to create maps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nqtm(mpsz_pop2020, fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## 3.2 Customizing `tmap` elements\n\nExplore the core `tmap` elements, including layers, aesthetics, and customization options.\n\n### 3.2.1 Intro to TMAP\n\nA basic map can be created with the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n#### 3.2.1.1 Explanation of tmap Elements:\n\n1.  **`tm_shape(mpsz_pop2020)`**: Defines the spatial object to be visualized, in this case, the `mpsz_pop2020` dataset.\n\n2.  **`tm_fill()`**: Adds a fill layer to the map based on the `DEPENDENCY` variable.\n\n    -   **`style = \"quantile\"`**: Classifies data into quantiles for better visual distribution.\n\n    -   **`palette = \"Blues\"`**: Specifies the color scheme for the map, using a sequential palette.\n\n    -   **`title = \"Dependency ratio\"`**: Sets the title for the legend.\n\n3.  **`tm_layout()`**: Customizes the overall map layout.\n\n    -   **`main.title` and its options**: Adds a centered title to the map with customized size and positioning.\n\n    -   **`legend.height` and `legend.width`**: Adjusts the size of the legend.\n\n    -   **`frame = TRUE`**: Adds a border around the map.\n\n4.  **`tm_borders(alpha = 0.5)`**: Adds semi-transparent borders to the map, enhancing visual separation between areas.\n\n5.  **`tm_compass(type = \"8star\", size = 2)`**: Adds a decorative compass with an eight-point star design to the map.\n\n6.  **`tm_scale_bar()`**: Includes a scale bar, providing a reference for distance.\n\n7.  **`tm_grid(alpha = 0.2)`**: Adds a faint grid to the background, aiding spatial orientation.\n\n8.  **`tm_credits()`**: Displays credits and data sources in the bottom-left corner of the map.\n\n#### 3.2.1.2 Additional T-Map Elements\n\n-   **Dots and Symbols**: Use `tm_dots()` for point data and `tm_symbols()` for more complex symbol mapping.\n-   **Lines**: Add linear features using `tm_lines()`, which allows customization of line color, width, and style.\n-   **Text Labels**: The `tm_text()` function displays labels on the map, with options for adjusting text size, color, and positioning.\n-   **Faceting (Small Multiples)**: `tm_facets()` is useful for comparing data across time periods, categories, or regions.\n-   **Stacking Layers**: Multiple `tm_shape()` calls can overlay different spatial objects, allowing mixed data types.\n-   **Raster Data**: For continuous surface data like heatmaps, use `tm_raster()`.\n-   **Legends**: The `tm_legend()` function offers finer control over legend appearance.\n-   **Interactive Viewing**: When building interactive maps, `tm_view()` supports zooming and panning for web applications.\n-   **Graticules and Grid Lines**: Use `tm_graticules()` to add latitude and longitude lines for spatial orientation.\n\n### 3.2.2 Drawing Maps\n\n#### 3.2.2.1 Set up the base map\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_polygons()\n```\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n#### 3.2.2.2 Set up choropleth map with TMAP and TM_Polygons\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) + tm_polygons(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n#### 3.2.2.3 Drawing a choropleth map using *tm_fill()* and \\*tm_border()\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#With Borders\ntm_shape(mpsz_pop2020)+tm_fill(\"DEPENDENCY\") + tm_borders(lwd = 0.1,  alpha = 1)\n```\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-13-2.png){width=672}\n:::\n:::\n\n\n## 3.3 data classification\n\n### 3.3.1 Understanding Data Classification\n\nTechniques for categorizing continuous or categorical data into classes for better readability. `tmap` offers ten classification methods, including `fixed`, `sd`, `equal`, `pretty` (default), `quantile`, `kmeans`, `hclust`, `bclust`, `fisher`, and `jenks`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmap_quantile <-\n  tm_shape(mpsz_pop2020) + \n    tm_fill(\"DEPENDENCY\", n = 5, style = \"quantile\") + \n    tm_borders(alpha = 0.5) + \n    tm_layout(title = \"quantile\", legend.outside = TRUE, legend.outside.size = 0.2)\n\nmap_equal <- \n  tm_shape(mpsz_pop2020) + \n    tm_fill(\"DEPENDENCY\", n = 5, style = \"equal\") + \n    tm_borders(alpha = 0.5) + \n    tm_layout(title = \"equal\", legend.outside = TRUE, legend.outside.size = 0.2)\n\nmap_pretty <-\n  tm_shape(mpsz_pop2020) + \n    tm_fill(\"DEPENDENCY\", n = 5, style = \"pretty\") + \n    tm_borders(alpha = 0.5) + \n    tm_layout(title = \"pretty\", legend.outside = TRUE, legend.outside.size = 0.2)\n\nmap_fisher <-\n  tm_shape(mpsz_pop2020) + \n    tm_fill(\"DEPENDENCY\", n = 5, style = \"fisher\") + \n    tm_borders(alpha = 0.5) + \n    tm_layout(title = \"fisher\", legend.outside = TRUE, legend.outside.size = 0.2)\n\nmap_kmeans <-\n  tm_shape(mpsz_pop2020) + \n    tm_fill(\"DEPENDENCY\", n = 5, style = \"kmeans\") + \n    tm_borders(alpha = 0.5) + \n    tm_layout(title = \"kmeans\", legend.outside = TRUE, legend.outside.size = 0.2)\n\n# Arrange maps with all legends displayed outside and scaled\ntmap_arrange(map_quantile, map_equal, map_pretty, \n             map_fisher, map_kmeans,\n             ncol = 2, nrow = 3)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.37, 0.37, 0.37, 0.37, 0.34, 0.57. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.46, 0.46, 0.41, 0.37, 0.37, 0.57. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.62, 0.53, 0.53, 0.57. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.37, 0.37, 0.37, 0.34, 0.31, 0.57. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\nLegend labels were too wide. The labels have been resized to 0.37, 0.37, 0.37, 0.34, 0.31, 0.57. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### 3.3.2 Classification and Data manipulation\n\nData lies all the time and it's no difference from Maps, be careful on what are the classification method that we choose! Notice the different when we have different number of classification size.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Quantile Maps\nmap_quantile_2 <-\n  tm_shape(mpsz_pop2020) + \n    tm_fill(\"DEPENDENCY\", n = 2, style = \"quantile\") + \n    tm_borders(alpha = 0.5) + \n    tm_layout(\n      main.title = \"Distribution Dependency - (Quantile - 2 classes)\", \n      main.title.position = \"center\", \n      main.title.size = 0.5, \n      main.title.fontface = \"bold\", # Bold main title\n      legend.outside = TRUE, \n      legend.outside.size = 0.2\n    )\n\nmap_quantile_6 <-\n  tm_shape(mpsz_pop2020) + \n    tm_fill(\"DEPENDENCY\", n = 6, style = \"quantile\") + \n    tm_borders(alpha = 0.5) + \n    tm_layout(\n      main.title = \"Distribution Dependency - (Quantile - 6 classes)\", \n      main.title.position = \"center\", \n      main.title.size = 0.5, \n      main.title.fontface = \"bold\", # Bold main title\n      legend.outside = TRUE, \n      legend.outside.size = 0.2\n    )\n\nmap_quantile_10 <-\n  tm_shape(mpsz_pop2020) + \n    tm_fill(\"DEPENDENCY\", n = 10, style = \"quantile\") + \n    tm_borders(alpha = 0.5) + \n    tm_layout(\n      main.title = \"Distribution Dependency - (Quantile - 10 classes)\", \n      main.title.position = \"center\", \n      main.title.size = 0.5, \n      main.title.fontface = \"bold\", # Bold main title\n      legend.outside = TRUE, \n      legend.outside.size = 0.2\n    )\n\nmap_quantile_20 <-\n  tm_shape(mpsz_pop2020) + \n    tm_fill(\"DEPENDENCY\", n = 20, style = \"quantile\") + \n    tm_borders(alpha = 0.5) + \n    tm_layout(\n      main.title = \"Distribution Dependency - (Quantile - 20 classes)\", \n      main.title.position = \"center\", \n      main.title.size = 0.5, \n      main.title.fontface = \"bold\", # Bold main title\n      legend.outside = TRUE, \n      legend.outside.size = 0.2\n    )\n\n# Arrange the quantile maps in a grid\ntmap_arrange(map_quantile_2, map_quantile_6, map_quantile_10, map_quantile_20,\n             ncol = 2, nrow = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.37, 0.34, 0.57. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.37, 0.37, 0.37, 0.37, 0.37, 0.34, 0.57. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.37, 0.37, 0.37, 0.37, 0.37, 0.37, 0.37, 0.37, 0.37, 0.34, 0.57. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.33. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Equal Interval Maps\nmap_equal_2 <-\n  tm_shape(mpsz_pop2020) + \n    tm_fill(\"DEPENDENCY\", n = 2, style = \"equal\") + \n    tm_borders(alpha = 0.5) + \n    tm_layout(\n      main.title = \"Distribution Dependency - (Equal - 2 classes)\", \n      main.title.position = \"center\", \n      main.title.size = 0.5, \n      main.title.fontface = \"bold\", # Bold main title\n      legend.outside = TRUE, \n      legend.outside.size = 0.2\n    )\n\nmap_equal_6 <-\n  tm_shape(mpsz_pop2020) + \n    tm_fill(\"DEPENDENCY\", n = 6, style = \"equal\") + \n    tm_borders(alpha = 0.5) + \n    tm_layout(\n      main.title = \"Distribution Dependency - (Equal - 6 classes)\", \n      main.title.position = \"center\", \n      main.title.size = 0.5, \n      main.title.fontface = \"bold\", # Bold main title\n      legend.outside = TRUE, \n      legend.outside.size = 0.2\n    )\n\nmap_equal_10 <-\n  tm_shape(mpsz_pop2020) + \n    tm_fill(\"DEPENDENCY\", n = 10, style = \"equal\") + \n    tm_borders(alpha = 0.5) + \n    tm_layout(\n      main.title = \"Distribution Dependency - (Equal - 10 classes)\", \n      main.title.position = \"center\", \n      main.title.size = 0.5, \n      main.title.fontface = \"bold\", # Bold main title\n      legend.outside = TRUE, \n      legend.outside.size = 0.2\n    )\n\nmap_equal_20 <-\n  tm_shape(mpsz_pop2020) + \n    tm_fill(\"DEPENDENCY\", n = 20, style = \"equal\") + \n    tm_borders(alpha = 0.5) + \n    tm_layout(\n      main.title = \"Distribution Dependency - (Equal - 20 classes)\", \n      main.title.position = \"center\", \n      main.title.size = 0.5, \n      main.title.fontface = \"bold\", # Bold main title\n      legend.outside = TRUE, \n      legend.outside.size = 0.2\n    )\n\n# Arrange the equal interval maps in a grid\ntmap_arrange(map_equal_2, map_equal_6, map_equal_10, map_equal_20,\n             ncol = 2, nrow = 2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.46, 0.41, 0.57. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.37, 0.37, 0.37, 0.34, 0.31, 0.31, 0.57. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLegend labels were too wide. The labels have been resized to 0.46, 0.46, 0.46, 0.46, 0.46, 0.41, 0.37, 0.37, 0.37, 0.37, 0.57. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nSome legend labels were too wide. These labels have been resized to 0.39, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35, 0.35. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n:::\n\n\nThe choice between a smaller or larger `n` (number of classes) depends on the level of detail we want to show:\n\n-   **Smaller `n` (e.g., 2 or 3 classes):** Best for broad, simplified comparisons or when you want to emphasize clear distinctions between categories. Useful for general audiences or when the data has clear breakpoints.\n\n-   **Larger `n` (e.g., 10 or 20 classes):** Ideal for showing fine-grained differences and detecting subtle patterns. More useful when detailed analysis is needed, but it can overwhelm or confuse the viewer if not carefully chosen.\n\nThe decision is less about standard deviation and more about the purpose of your analysis: high `n` captures more detail, while low `n` simplifies the data.\n\n#### 3.3.2.4 Custom Break\n\nAlternatively, we can always just use summary function to get some descriptive statistic and set custom breakpoints.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Values have found that are higher than the highest break\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## 3.4 color scheme\n\nChoosing effective color schemes to enhance visual communication, with a focus on sequential, diverging, and categorical palettes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n      main.title = \"Blue Color Scheme\", \n      main.title.position = \"center\", \n      main.title.size = 1.5, \n      main.title.fontface = \"bold\", # Bold main title\n      legend.outside = TRUE, \n      legend.outside.size = 0.2\n    )\n```\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Reverse color\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(\n      main.title = \"Reverse Green Color Scheme\", \n      main.title.position = \"center\", \n      main.title.size = 1.5, \n      main.title.fontface = \"bold\", # Bold main title\n      legend.outside = TRUE, \n      legend.outside.size = 0.2\n    )\n```\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-17-2.png){width=672}\n:::\n:::\n\n\n## 3.5 map layouts\n\nCustomizing map layouts, including titles, legends, scale bars, and other cartographic elements.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Map Style\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"classic\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-18-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-18-3.png){width=672}\n:::\n:::\n\n\n## 3.6 drawing small multiple choropelth maps\n\nGenerate multiple maps in a single visual output to compare different variables or time periods. Small multiple maps (facet maps) allow visualization of how spatial patterns change across categories.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"Young\", \"Aged\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"white\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"Aged\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-19-3.png){width=672}\n:::\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"Young\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"Aged\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-19-4.png){width=672}\n:::\n:::\n\n\n## 3.7 mapping spatial object meeting a selection criterion\n\nFilter and map spatial objects that satisfy specific conditions or criteria.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Hands_On_Exercise2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n# 4.0 Extra-Hands-On Exercise Let's have fun with **Choropleth** Mapping!\n\n## 4.1 Age Cluster By Years and Sub zones.\n\nLet's push the boundaries a bit! The goal is to visualize how the age clusters within each subzone have evolved over time. Although we haven't fully explored interactivity yet, we can take on the challenge of creating a video GIF that sequentially combines maps for each year. We'll wrap it up with a bird's-eye comparison of the different years side by side.\n\n###  4.1.1 Preparing the data set\n\n1.  We Need to read the data set in\n2.  Find and cluster the age groups\n    -   First Get all the age group categories\n    -   Then cluster then to young, economy active and aged.\n3.  Then we full join the map to their individual values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_data <- read.csv(\"data/respopagesextod2011to2020.csv\")\n# Load the population data\n# Categorize age groups\nage_categories <- unique(popdata$AG)\npopulation_data <- population_data %>%\n  mutate(\n    Age_Category = case_when(\n      AG %in% age_categories[1:5] ~ \"Young\",  # Age groups 0_to_4 until 20_to_24\n      AG %in% age_categories[6:13] ~ \"Economy Active\",  # Age groups 25_to_29 until 60_to_64\n      AG %in% age_categories[14:length(age_categories)] ~ \"Aged\",  # Age groups 65 and above\n      TRUE ~ \"Other\"\n    )\n  )\nanimation_maps <- list()\nage_clusters <- unique(population_data$Age_Category)\n\n\naggregated_data <- population_data %>%\n  group_by(SZ,Time,Age_Category) %>%\n  summarise(Total_Population = sum(Pop, na.rm = TRUE)) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'SZ', 'Time'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\naggregated_data <- aggregated_data %>%\n  mutate_at(.vars = vars(SZ), \n          .funs = list(toupper))\n\n# Now join the aggregated population data into the expanded spatial data\nfinal_map_data <- full_join(mpsz, aggregated_data, by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\n#### 4.1.1.1 Difference in the number of MPZ's sub-zone versus Population's sub-zones.\n\nWhile analyzing the data, we noticed that in the year 2020, there are more subzones than the usual 323 MPZ subzones. To address this, we can apply a simple filter to remove the excess subzones using the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique_sz <- unique(aggregated_data$SZ)\nunique_mpsz_sz <- unique(mpsz$SUBZONE_N)\n\n# Find subzones in aggregated_data but not in mpsz\nmissing_in_mpsz <- setdiff(unique_sz, unique_mpsz_sz)\ncat(\"Subzones in aggregated_data but not in mpsz:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSubzones in aggregated_data but not in mpsz:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(missing_in_mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"BAHAR\"                    \"BRICKLAND\"               \n [3] \"CLEANTECH\"                \"FOREST HILL\"             \n [5] \"GARDEN\"                   \"LAKESIDE (BUSINESS)\"     \n [7] \"LAKESIDE (LEISURE)\"       \"MURAI\"                   \n [9] \"NICOLL\"                   \"PARK\"                    \n[11] \"PLANTATION\"               \"TENGAH INDUSTRIAL ESTATE\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Find subzones in mpsz but not in aggregated_data\nmissing_in_aggregated <- setdiff(unique_mpsz_sz, unique_sz)\ncat(\"Subzones in mpsz but not in aggregated_data:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSubzones in mpsz but not in aggregated_data:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(missing_in_aggregated)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ncharacter(0)\n```\n\n\n:::\n\n```{.r .cell-code}\ncommon_subzones <- intersect(unique(mpsz$SUBZONE_N), unique(aggregated_data$SZ))\nfinal_map_data <- final_map_data %>%\n  filter(SUBZONE_N %in% common_subzones)\n```\n:::\n\n\n### 4.1.2 Generating the Gifs\n\n#### 4.1.2.1 Logic and Steps \n\n1.  Step 1; we categorize the data into different age clusters.\n2.  For each cluster, we filter the dataset,\n3.  generate a map for each year, and then consolidate them.\n4.  Finally, we create the GIF to visualize the changes over time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_clusters <- unique(final_map_data$Age_Category)\n\n# Loop through each age category and generate a GIF\nfor (age_cluster in age_clusters) {\n  # Filter the data for the current age category\n  age_category_data <- final_map_data %>%\n    filter(Age_Category == age_cluster)\n  \n  # List to store each year’s map for the GIF\n  animation_frames <- list()\n  \n  # Loop through each year and generate frames\n  years <- unique(age_category_data$Time)\n  for (year in years) {\n    year_data <- age_category_data %>%\n      filter(Time == year)\n    \n    if (nrow(year_data) > 0) {  # Ensure there is data for the year\n      # Create the map for the current year\n      map <- tm_shape(year_data) +\n        tm_polygons(\"Total_Population\", style = \"quantile\", palette = \"-RdYlBu\", \n                    title = paste(age_cluster, \"Population in\", year)) +\n        tm_layout(\n          main.title = paste(\"Population Distribution for\", age_cluster, \"in\", year),\n          main.title.size = 1,  # Increase the title size for better visibility\n          main.title.fontface = \"bold\",  # Make the title bold\n          main.title.position = c(\"center\", \"top\"),  # Center align the title at the top\n          legend.position = c(\"center\", \"bottom\"),  # Move the legend below the map\n          legend.stack = \"horizontal\",  # Ensure the legend is stacked horizontally\n          frame = FALSE\n        )\n      \n      # Add the map to the list of frames\n      animation_frames[[as.character(year)]] <- map\n    } else {\n      cat(\"Skipping year:\", year, \"due to missing or empty data for age category:\", age_cluster, \"\\n\")\n    }\n  }\n  \n  # Dynamically create a single comparison map using tm_facets\n  comparison_map <- tm_shape(age_category_data) +\n    tm_polygons(\"Total_Population\", style = \"quantile\", palette = \"-RdYlBu\", \n                title = paste(age_cluster, \"Population Comparison (2011-2020)\")) +\n    tm_facets(by = \"Time\", ncol = 2, free.coords = FALSE) +  # Arrange facets in 2 columns\n    tm_layout(\n      main.title = paste(\"Population Comparison for\", age_cluster, \"Across All Years\"),\n      main.title.size = 2,  # Max out the title size for the final frame\n      main.title.fontface = \"bold\",  # Make the title bold\n      main.title.position = c(\"center\", \"top\"),  # Center align the title at the top\n      legend.position = c(\"center\", \"bottom\"),  # Move the legend to the bottom\n      legend.stack = \"horizontal\",  # Ensure the legend is stacked horizontally for better fit\n      frame = FALSE\n    )\n  \n  # Add the comparison map as the final frame multiple times to extend its duration\n  for (i in 1:5) {  # Adding the final frame 5 times to simulate a 10-second delay (5 x 2 seconds)\n    animation_frames[[paste0(\"comparison_\", i)]] <- comparison_map\n  }\n  \n  # Save the animation as a GIF with the correct delays\n  tmap_animation(animation_frames, \n                 filename = paste0(\"population_time_series_\", age_cluster, \".gif\"), \n                 delay = 200,  # 2 seconds per frame (2000 ms)\n                 width = 1500, height = 1200)  # Increase the size for better visibility\n  \n  cat(\"Saved GIF for Age Category:\", age_cluster, \"\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCreating frames\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCreating animation\nAnimation saved to C:\\Users\\jiale\\Desktop\\IS415\\IS415-GAA\\Hands_On_Exercises\\Hands_On_Exercise_2\\population_time_series_Aged.gif \nSaved GIF for Age Category: Aged \nCreating frames\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCreating animation\nAnimation saved to C:\\Users\\jiale\\Desktop\\IS415\\IS415-GAA\\Hands_On_Exercises\\Hands_On_Exercise_2\\population_time_series_Economy Active.gif \nSaved GIF for Age Category: Economy Active \nCreating frames\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n======\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n=====\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCreating animation\nAnimation saved to C:\\Users\\jiale\\Desktop\\IS415\\IS415-GAA\\Hands_On_Exercises\\Hands_On_Exercise_2\\population_time_series_Young.gif \nSaved GIF for Age Category: Young \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"All GIFs have been created.\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAll GIFs have been created.\n```\n\n\n:::\n:::\n\n\n### 4.1.3 Visualization of the GIFS.\n\n#### 4.1.3.1 Age\n\n![](population_time_series_Aged.gif)\n\n#### 4.1.3.2 Economic Active\n\n![](population_time_series_Economy Active.gif)\n\n#### 4.1.3.3 Young\n\n![](population_time_series_Young.gif)\n",
    "supporting": [
      "Hands_On_Exercise2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}