---
title: "Spatial Weights and Applications"
author: "Jiale SO"
date: "September 14, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
  message: false
  warning: false
---

# Outcome of this Exercise

How to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:

-   import geospatial data using appropriate function(s) of **sf** package,

-   import csv file using appropriate function of **readr** package,

-   perform relational join using appropriate join function of **dplyr** package,

-   compute spatial weights using appropriate functions of **spdep** package, and

-   calculate spatially lagged variables using appropriate functions of **spdep** package.

# 1.0 Setting the Environment

ensure that **spdep**, **sf**, **tmap** and **tidyverse** packages of R are currently installed 

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr, tibble)
```

# 2.0 Importing the data

Two data sets will be used in this hands-on exercise, they are:

-   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.

-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

::: panel-tabset
## ShapeFile

```{r}
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

## CSVFile with Left Join

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
hunan <- left_join(hunan,hunan2012)
```
:::

# **3.0 Visualising Regional Development Indicator**

```{r, fig.width=10, fig.height=5}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

# **4.0 Computing Contiguity Spatial Weights**

 [*poly2nb()*](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. Remember to use "pass" a queen argument that takes TRUE or FALSE as options, and it will return a list of first order neighbours using Queen Critiera

## 4.1 **Computing (QUEEN) contiguity based neighbours**

::: panel-tabset
## Computing Queen Contiguity Weight Matrix

-   **`wm_q <- poly2nb(hunan, queen=TRUE)`**:

    -   `poly2nb` creates a neighborhood list based on polygon boundaries.

    -   `hunan` is the spatial polygon data (likely a `SpatialPolygonsDataFrame` or `sf` object).

    -   `queen=TRUE` specifies that the Queen contiguity rule should be used. This means that two polygons are considered neighbors if they share at least one point (either a boundary or a corner).

    -   `wm_q` stores the neighborhood structure as an object.

-   **`summary(wm_q)`**:

    -   This provides a summary of the neighborhood list, showing how many neighbors each polygon has and other summary statistics.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.
:::

::: panel-tabset
## Neighbours

For each polygon in our polygon object, *wm_q* lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, we use the following code chunk, to which we see they have 5 neighbours

```{r}
wm_q[[1]]
```

## Get Their Names

We can retrive the county name of Polygon ID=1 by using the code chunk below:

```{r}
hunan$County[1]
```

The output reveals that Polygon ID=1 is Anxiang county.

## Neighbour Names

To reveal the county names of the five neighboring polygons, the code chunk will be used:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

## Retrieve the GDPPC of Neighbour countries With Names

We can retrieve the GDPPC of these five countries by using the code chunk below.

```{r}
nb1 <- wm_q[[1]]

# Retrieve the GDPPC values for the neighbors and the first polygon
gdp_values <- c(hunan$GDPPC[1], hunan$GDPPC[nb1])

# Retrieve the county names for the first polygon and its neighbors
county_names <- c(hunan$NAME_3[1], hunan$NAME_3[nb1])

# Assign the county names as names of the GDPPC values
names(gdp_values) <- county_names

# Display the GDPPC values with county names
gdp_values
```

## List Each Country's Neighbour

```{r}
# Initialize a list to store the data for all polygons
gdp_data <- lapply(seq_along(wm_q), function(i) {
  # Get the neighbors of polygon i
  neighbors <- wm_q[[i]]
  
  # Get the GDPPC values for the polygon and its neighbors
  gdp_values <- c(hunan$GDPPC[i], hunan$GDPPC[neighbors])
  
  # Get the county names for the polygon and its neighbors
  county_names <- c(hunan$NAME_3[i], hunan$NAME_3[neighbors])
  
  # Create a tibble for each polygon with neighbors
  data <- tibble(
    Polygon = county_names[1],  # Main polygon name
    Neighbor = county_names[-1],  # Neighbor names
    GDPPC = gdp_values[-1],  # Neighbor GDPPC values
    Neighbour_GDPPC = gdp_values[1]  # Main polygon GDPPC
  )
  
  return(data)
})

# Combine all rows into a single data frame
gdp_df <- bind_rows(gdp_data)

# View the combined data in a cleaner format
gdp_df

```
:::

## 4.2 **Creating (ROOK) contiguity based neighbours**

::: panel-tabset
## Computing Root Contiguity Weight Matrix

Instead of queen true, we use False here

```{r}
wm_r  <- poly2nb(hunan, queen= FALSE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan using the rook. The most connected area unit has 10 neighbours. There are two area units with only one heighbours.
:::

::: panel-tabset
## Neighbours

For each polygon in our polygon object, *wm_q* lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, we use the following code chunk, to which we see they have 4 neighbours

```{r}
wm_r[[1]]
```

## Get Their Names

We can retrive the county name of Polygon ID=1 by using the code chunk below:

```{r}
hunan$County[1]
```

The output reveals that Polygon ID=1 is Anxiang county.

## Neighbour Names

To reveal the county names of the five neighboring polygons, the code chunk will be used:

```{r}
hunan$NAME_3[c(3,4,57,85)]
```

## Retrieve the GDPPC of Neighbour countries With Names

We can retrieve the GDPPC of these five countries by using the code chunk below.

```{r}
nb1 <- wm_r[[1]]

# Retrieve the GDPPC values for the neighbors and the first polygon
gdp_values <- c(hunan$GDPPC[1], hunan$GDPPC[nb1])

# Retrieve the county names for the first polygon and its neighbors
county_names <- c(hunan$NAME_3[1], hunan$NAME_3[nb1])

# Assign the county names as names of the GDPPC values
names(gdp_values) <- county_names

# Display the GDPPC values with county names
gdp_values
```

## List Each Country's Neighbour

```{r}
# Initialize a list to store the data for all polygons
gdp_data <- lapply(seq_along(wm_q), function(i) {
  # Get the neighbors of polygon i
  neighbors <- wm_r[[i]]
  
  # Get the GDPPC values for the polygon and its neighbors
  gdp_values <- c(hunan$GDPPC[i], hunan$GDPPC[neighbors])
  
  # Get the county names for the polygon and its neighbors
  county_names <- c(hunan$NAME_3[i], hunan$NAME_3[neighbors])
  
  # Create a tibble for each polygon with neighbors
  data <- tibble(
    Polygon = county_names[1],  # Main polygon name
    Neighbor = county_names[-1],  # Neighbor names
    GDPPC = gdp_values[-1],  # Neighbor GDPPC values
    Neighbour_GDPPC = gdp_values[1]  # Main polygon GDPPC
  )
  
  return(data)
})

# Combine all rows into a single data frame
gdp_df <- bind_rows(gdp_data)

# View the combined data in a cleaner format
gdp_df

```
:::

## 4.3 Visualizing Contiguity Weights

To create a connectivity graph for polygons, we first need to obtain points for each polygon, which can be done using their centroids. The centroids will serve as the points for the graph.

The process involves calculating the centroids using the `sf` package. Instead of directly using `st_centroid` on the spatial data object, we need to extract the centroid coordinates into a separate data frame. This is done by applying the `st_centroid` function to the geometry column of the spatial data using a mapping function (`map_dbl` from the `purrr` package).

By mapping `st_centroid` over the geometry column, we can extract the longitude (the first value in each centroid) using double bracket notation `[[1]]`. This prepares the longitude values for further use in creating the connectivity graph.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]]) #This allows us to get only the longitude, which is the first value in each centroid.
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]]) #We do the same for latitude with one key difference. We access the second value per each centroid with [[2]].
coords <- cbind(longitude, latitude) # Now that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.
head(coords) #We check the first few observations to see if things are formatted correctly.

```

### 4.3.1 Plotting Contiguity based Neighbours Map

::: panel-tabset
## Queen's

```{r, fig.width=10, fig.height=6}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

## King's

```{r, fig.width=10, fig.height=6}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

## Side By Side Comparison

```{r,fig.width=10, fig.height=6}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```
:::

# 5.0 Computing Distance Based Neighbors

Using the `dnearneigh()` function from the `spdep` package. The function identifies neighbors within a specified distance range (distance band) using Euclidean distances.

### Key Steps:

1.  **Determining the Cut-off Distance**:

    -   The goal is to find an upper limit for the distance band by following a few steps using `knearneigh()`, `knn2nb()`, and `nbdists()`.

2.  **Procedure**:

    -   **Step 1**: Use `knearneigh()` to find the `k` nearest neighbors for each point. This returns an object representing the neighborhood relationships between regions.

    -   **Step 2**: Convert the nearest neighbor object into a neighbors list using `knn2nb()`. This converts the relationships into integer vectors containing the IDs of neighboring regions.

    -   **Step 3**: Calculate the distances between neighboring points using `nbdists()`, which returns the distances in the same units as the coordinates or in kilometers if the coordinates are unprojected.

    -   **Step 4**: Use `unlist()` to flatten the list structure of the distances returned by `nbdists()`.

## 5.1 Determine Cut-Off Distance

```{r}
# Extract the coordinates of the regions
#coords <- coordinates(hunan)

# Find the k-nearest neighbors
k1 <- knn2nb(knearneigh(coords))
# Calculate the distances between the neighbors
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
# Display a summary of the distances
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

## 5.2 Computing Fixed and Adaptive Distance Weight Matrix

::: callout-note
**When to use fixed or adaptive?**

-   **Fixed Distance Weighting**: Use when spatial points are distributed evenly and when you want a constant radius of influence for all regions.

-   **Adaptive Distance Weighting**: Use when spatial points are unevenly distributed and when you want each region to have a comparable number of neighbors, regardless of their physical distance.
:::

::: panel-tabset
## Fixed Distance

Compute the distance weight matrix by using *dnearneigh()* as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

::: callout-note
**Quiz:** What is the meaning of “Average number of links: 3.681818” shown above?

**"Average number of links: 3.681818"** refers to the **average number of neighboring regions** each region in the dataset has, based on the distance threshold defined earlier 62km.

**"Average number of links: 3.681818"** means that, on average, each region has around 3.68 neighbors within a 62-kilometer radius.
:::

**Visualizing the weight matrix**

```{r}
neighbor_counts <- data.frame(
  County = hunan$County,
  Neighbors = card(wm_d62)  # card() gives the number of neighbors for each region
)

# View the data frame
print(neighbor_counts)
# Or use View() in RStudio for an interactive table view
```

**Plotting It**

-   **First Plot**: The **base map** of the regions (Hunan) is drawn using their geographic boundaries.

-   **Second Plot**: The **distance-based neighbor links** are added, connecting regions that are within 62 km of each other.

-   **Third Plot**: The **k-nearest neighbor links** are added as **red arrows**, showing the regions' closest neighbors.

```{r,fig.width=10, fig.height=6}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

**Comparing it against 1st nearest and distance link.**

```{r,fig.width=10, fig.height=6}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

## Adaptive Distance

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6

```

Similarly, we can display the content of the matrix by using *str()*.

```{r}
str(knn6)

```

**Plotting it and against 1st nearest and distance link**

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(knn6, coords, add=TRUE, pch = 19, cex = 0.6)
```
:::

# 6.0 Weight Based on In-versed Distance Method.

The **inverse distance weighting (IDW)** method is a technique used in spatial analysis to assign weights to neighboring regions or points based on their distance. The core idea is that **closer neighbors exert a stronger influence**, and the weight of a neighbor decreases as its distance increases. In the inverse distance method, weights are inversely proportional to the distance between points, meaning that the closer two points are, the higher the weight assigned to their relationship.

First, we will compute the distances between areas by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

1.  **`dist`**: Calculates the distances between each region and its neighbors.

2.  **`lapply()` with `1/(x)`**: Applies the inverse distance formula to those distances, assigning higher weights to closer neighbors.

3.  **`ids`**: Stores the **inverse distance weights** for each region's neighbors, which can be used in spatial modeling or analysis to emphasize the influence of closer regions over more distant ones.

The inverse distance method here helps quantify the influence of neighbors, where closer neighbors exert a stronger influence compared to those farther away.

# 7.0 Row-standardized Weight Matrix

Assigning **spatial weights** to neighboring polygons using the **“W” style**, which stands for **row-standardized weights**.

### Key Concepts:

1.  **Row-Standardized Weights (style="W")**:

    -   In this method, each neighboring polygon is assigned an **equal weight**.

    -   The weight assigned to each neighbor is the inverse of the total number of neighbors for the polygon.

    -   For example, if a polygon has 5 neighbors, the weight assigned to each of its neighbors is 15\frac{1}{5}51​.

2.  **Summing Weighted Values**:

    -   This method sums up the weighted values from each neighboring polygon. The row-standardized weights ensure that the weights for a polygon's neighbors sum up to 1.

    -   **Edge effect**: Polygons at the edge of the study area may have fewer neighbors, potentially leading to biased estimates of spatial autocorrelation, as their weights are distributed over fewer polygons.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

-   **`nb2listw()`**: Converts the neighbor list `wm_q` into a row-standardized spatial weights matrix.

-   **`zero.policy = TRUE`**: Allows regions with no neighbors to be included, assigning them a weight of zero. This prevents errors for polygons without neighbors, though it should be used with caution to avoid inadvertently missing important spatial relationships.

To see the weight of the first polygon’s eight neighbors type

```{r}
rswm_q$weights[10]

```

In this case, if the 10th polygon has 8 neighbors, each neighbor will receive a weight of 18=0.125\frac{1}{8} = 0.12581​=0.125. This means that when computing a spatially lagged variable (such as average neighboring income), each neighbor’s income will be multiplied by 0.125 before summing.

We can also create a **row-standardized distance weight matrix** based on inverse distances. This adjusts the weights by incorporating the inverse distance method while ensuring that the weights for each polygon still sum to 1.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

-   **`glist=ids`**: Incorporates the inverse distance weights (`ids`) calculated earlier into the weight matrix.

-   **`style="B"`**: This is a **binary weighting** scheme, where the weights are not normalized to sum to 1.

To inspect the weights for the first polygon:

```{r}
rswm_ids$weights[1]
```

This shows the inverse distance weights for the first polygon’s neighbors. To summarize the distribution of all weights across the dataset:

```{r}
summary(unlist(rswm_ids$weights))
```

# 8.0 **Application of Spatial Weight Matrix**

## 8.1 spatial lag with row-standardized weights

compute the average neighbor GDPPC value for each polygon. These values are often referred to as **spatially lagged values**.

**`lag.listw(rswm_q, hunan$GDPPC)`**:

-   This calculates the **spatial lag** of GDP per capita (GDPPC) for each region using the **row-standardized weights** (`rswm_q`).

-   For each region, the function computes the weighted average of the GDPPC values of its neighboring regions.

-   Since we are using row-standardized weights, the influence of each neighboring region is scaled based on the number of neighbors. If a region has 4 neighbors, each neighbor’s influence will be 14\frac{1}{4}41​.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

In the earlier section, we retrieved the GDPPC of these five countries by using the code chunk below.

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

::: callout-note
Question: Can you see the meaning of Spatial lag with row-standardized weights now?

The **spatial lag with row-standardized weights** helps quantify the average impact of neighboring regions on a specific variable (e.g., GDP per capita). It shows how a region's characteristics, such as economic performance, are influenced by its neighbors, with the weights for each region's neighbors summing to 1 for consistency across regions.

-   **Spatial Lag**: Represents the weighted average of a region’s neighbors' values, with equal weight assigned to each neighbor in the row-standardized approach.

-   **Row-Standardized Weights**: Since the sum of the weights for each region’s neighbors equals 1, the spatial lag becomes the arithmetic mean of its neighbors' values. More neighbors dilute the influence of any single one.

-   **Practical Use**: Spatial lag reflects how the GDP of neighboring regions affects a region's own GDP. If there is a mismatch between a region’s GDP and that of its neighbors, this will be evident in the spatial lag, making it a valuable tool in spatial econometrics for understanding regional dynamics.
:::

Append the spatially lag GDPPC Values

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
head(hunan)
```

Plot both GDPPC and spatial Lag GDPPC for comparison.

```{r,fig.width=10, fig.height=6}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

## 8.2 spatial lag as a sum of neighbouring values

Calculating the **spatial lag** by summing the GDP per capita (GDPPC) values of neighboring regions. Unlike row-standardized weights, where each neighbor's value is averaged, here each neighbor's GDPPC is simply added up without adjusting for the number of neighbors (since `style = "B"` is used, indicating **binary weights**). This approach gives an unweighted sum of neighboring values.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

-   **`b_weights`**: A binary weight matrix where each neighbor is assigned a weight of 1. The function `0*x + 1` ensures that for each neighbor, the weight is 1, no matter the distance or number of neighbors.

-   **`b_weights2`**: Converts the neighbor list `wm_q` to a binary weight matrix, meaning all neighboring polygons are equally weighted with no standardization.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
lag_sum
```

-   **`lag.listw(b_weights2, hunan$GDPPC)`**: This function calculates the **spatial lag** as the **sum of GDPPC values** of neighboring regions based on the binary weights. It returns a vector of summed GDPPC values for each region.

-   **`lag_sum`**: Combines the region names (`hunan$NAME_3`) with the spatial lag values (summed GDPPC) into a list.

-   **`lag.res`**: Converts this list into a data frame and assigns appropriate column names ("NAME_3" and "lag_sum GDPPC").

::: callout-note
Question: Can you understand the meaning of Spatial lag as a sum of neighboring values now?

This method of calculating spatial lag highlights the **cumulative economic influence** of neighboring regions. Regions with more neighbors will tend to have larger summed values, whereas regions with fewer neighbors may have lower sums, which can be important when considering spatial spillover effects.

-   **Spatial Lag as a Sum**: In this approach, the spatial lag is the **sum of the GDPPC values** of a region's neighbors. Unlike row-standardized weights where values are averaged, here each neighbor’s GDPPC is simply added up, emphasizing the total contribution from neighboring regions.

-   **Example**: If a region has three neighbors with GDPPC values of 20000, 25000, and 30000, the spatial lag would be the sum of these values: 20000+25000+30000=7500020000 + 25000 + 30000 = 7500020000+25000+30000=75000.
:::

```{r,fig.width=10, fig.height=6}
hunan <- left_join(hunan, lag.res)
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

## 8.3 spatial window average

modifying the neighbor structure to include each polygon itself as its own neighbor (i.e., adding a diagonal element), followed by computing the spatial lag of the GDPPC (Gross Domestic Product Per Capita) for each region, and finally visualizing and comparing the results.

### 8.3.1. **Include Self in Neighbor List**:

```{r}
wm_qs <- include.self(wm_q)
wm_qs[[1]]

```

-   **`include.self(wm_q)`**: This function adds the diagonal element to the neighbor list, meaning that each region is now considered its own neighbor, in addition to its original neighbors.

    -   For example, if region 1 originally had neighbors 2 and 3, after using `include.self()`, region 1 will now also be its own neighbor.

-   **`wm_qs[[1]]`**: Displays the neighbors of region 1, which now includes itself.

### 8.3.2. **Convert to Weights List**:

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

-   **`nb2listw(wm_qs)`**: Converts the updated neighbor list (with diagonal elements) into a **weights list**. This weights list will now include self-influence (i.e., each region is also its own neighbor with a certain weight).

-   **Weights List**: The resulting object stores the spatial weights for each region based on its new neighbor structure (including itself).

### 8.3.3 **Calculate Spatial Lag (with Self)**:

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, hunan$GDPPC)
lag_w_avg_gpdpc
```

**`lag.listw(wm_qs, hunan$GDPPC)`**: Computes the **spatial lag** of the GDPPC values using the updated weights list (`wm_qs`). The spatial lag now includes the influence of the region itself, in addition to its neighbors.

-   This means that when calculating the spatial lag for a region, its own GDPPC value is considered in the weighted average along with its neighbors' values.

### 8.3.4. **Store Results and Modify Data**:

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
hunan <- left_join(hunan, lag_wm_qs.res)
hunan %>%
  select("County", "lag GDPPC", "lag_window_avg GDPPC") %>%
  kable()

```

-   **Store Lag Results**: A new list, `lag.list.wm_qs`, is created to store the names of the regions (`hunan$NAME_3`) and their corresponding spatial lag values.

-   **Convert to Data Frame**: The list is converted into a data frame (`lag_wm_qs.res`), where each row contains a region's name and its calculated spatial lag (including self).

-   **Column Names**: The columns are renamed for clarity, with `lag_window_avg GDPPC` indicating the spatial lag values, including the diagonal elements (self).

### **8.3.5 Visualize the Results**: and Interpret

```{r,fig.width=10, fig.height=6}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

-   **Adding Self as a Neighbor**: The code includes each region as its own neighbor, which means when calculating the spatial lag (the weighted average of neighboring values), the region's own value is now part of the calculation.

-   **Spatial Lag Comparison**: Two versions of the spatial lag are created:

    -   **Without self**: The original spatial lag where only neighboring regions influence the lagged value.

    -   **With self**: The spatial lag that includes the region's own value in the weighted average.

## 8.4 spatial window sum

The **spatial window sum** calculates the sum of neighboring values for each region **without using row-standardized weights**. Unlike row-standardized weights, where each neighbor's influence is normalized to ensure that the weights sum to 1, the spatial window sum uses **binary weights** (equal weight for each neighbor) but directly sums the values of the neighboring regions, including the region itself as its own neighbor (with the help of `include.self()`).

### 8.4.1 **Add Diagonal Element (Include Self as Neighbor)**:

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

**`include.self(wm_q)`**: This function modifies the neighbor list (`wm_q`) so that each region now considers itself as one of its neighbors. This allows the region’s own GDPPC value to be included when calculating the spatial sum

### 8.4.2 **Create Binary Weights**: & Convert Neighbor to weight matrix

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
b_weights2 <- nb2listw(wm_qs, glist = b_weights, style = "B")
b_weights2
```

-   **`lapply(wm_qs, function(x) 0*x + 1)`**: This creates **binary weights**, where each neighbor, including the region itself, is given a weight of 1. This means that when calculating the spatial sum, each neighboring region's GDPPC is added without adjusting for the number of neighbors.

-   **Example of `b_weights[1]`**: For the first region, this shows the binary weights assigned to its neighbors, which will all be 1 (since `0*x + 1` results in 1 for each neighbor).

-   **`nb2listw(wm_qs, glist = b_weights, style = "B")`**: Converts the neighbor list with binary weights (`b_weights`) into a **spatial weight matrix**.

    -   **`style = "B"`** means the matrix is **binary** (each neighbor gets an equal weight of 1).

    -   This weight matrix is used to calculate the spatial window sum, where each neighboring region's value is simply summed up.

### 8.4.3 **Calculate Spatial Window Sum for GDPPC**:

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
hunan <- left_join(hunan, w_sum_gdppc.res)
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

-   **`lag.listw(b_weights2, hunan$GDPPC)`**: This calculates the **spatial window sum** of the GDPPC values using the binary weights matrix (`b_weights2`). Each region’s GDPPC value and its neighbors’ GDPPC values are summed up directly.

-   **`w_sum_gdppc`**: Stores the list of region names (`hunan$NAME_3`) along with the spatial window sum of GDPPC values for each region.

### 8.4.4 visualise and interpret the results

```{r,fig.width=10, fig.height=6}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```

-   **Spatial Window Sum**: This method calculates the sum of neighboring values without normalizing by the number of neighbors (i.e., without row-standardization). Each region’s value is added together with its neighbors’ values, including itself.

-   **Code Breakdown**:

    -   First, the diagonal (self) element is added to the neighbor list using `include.self()`.

    -   **Binary weights** (1 for each neighbor, including self) are applied to compute the spatial window sum using the `lag.listw()` function.

    -   The spatial window sum is then visualized alongside the row-standardized spatial lag to compare the two approaches.

-   **Comparison**: The spatial window sum gives a **total** influence of neighbors, whereas row-standardized weights give an **average** influence. Both approaches offer different insights into the spatial relationships between regions.

-   
