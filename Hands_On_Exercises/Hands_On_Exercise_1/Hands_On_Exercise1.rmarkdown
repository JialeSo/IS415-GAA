---
title: "Hands-On Exercise 1" 
---


## Install and launching R Packages

The code chunk below uses the p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.


```{r}
  pacman::p_load(sf, tidyverse)
```


Importing the data

## **Methods Of Importing Geospatial Data**

### **Importing polygon feature data in shapefile format**

Uses *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame.


```{r}
  mpsz  = st_read(dsn = "data/layer", layer= "MP14_SUBZONE_WEB_PL")
```


### **Importing polygon feature data in shapefile form**

Uses *st_read()* function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame.


```{r}
  cyclingpath = st_read(dsn = "data/CyclingPath_Jul2024", layer= "CyclingPathGazette")
```


### **Importing GIS data in kml format**

Uses KML or Geojson to read instead


```{r}
  preschool = st_read(dsn = "data/PreSchoolsLocation.geojson")
```


## **Checking the Content of A Simple Feature Data Frame**

### **st_geometry()**

Print only displays basic information of the feature class such as type of geometry


```{r}
st_geometry(mpsz)

```


### **glimpse()**

Prints Associated attribute information in the data frame


```{r}
glimpse(mpsz)
```


### **head()**

reveal complete information of a feature object


```{r}
head(mpsz, n=5)  
```


## **Plotting the Geospatial Data**

simple plot by R


```{r}
plot(mpsz)
```

```{r}
plot(st_geometry(mpsz))
```

```{r}
plot(mpsz)
```


## **Working with Projection**

### **Assigning EPSG code to a simple feature data frame**

An Common issue faced when importing geospatial data into R is that the coordinate system of the source data was either missing, we can use ST_CRS to map


```{r}
st_crs(mpsz)
```


Notice that sometimes, that EPSG code is wrong, and we can use st_set_crs to remap it


```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
st_crs(mpsz3414)
```


### **Transforming the projection of preschool from wgs84 to svy21**


```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
st_crs(preschool3414)
st_geometry(preschool3414)
```


## **Importing and Converting An Aspatial Data**

### **Importing the aspatial data**


```{r}
listings <- read_csv("data/listings.csv")
list(listings) 

```


### **Creating a simple feature data frame from an aspatial data frame**

Converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of **sf** packages


```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
glimpse(listings_sf)

```


## **Geoprocessing with sf package**

### **Buffering**


```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
buffer_cycling$AREA <- st_area(buffer_cycling)
sum(buffer_cycling$AREA)
```


### **Point-in-polygon count**

#### **The scenario:**

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.


```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
summary(mpsz3414$`PreSch Count`)
top_n(mpsz3414, 1, `PreSch Count`)
```


#### solution:


```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
top_n(mpsz3414, 1, `PreSch Count`)
```


## **Exploratory Data Analysis (EDA)**


```{r}
hist(mpsz3414$`PreSch Density`)
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```

