---
title: "Spatial Point Patterns Analysis"
author: "Jiale SO"
date: "August 30, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  warning: false
  freeze: true
---

# 1.0 Context:

------------------------------------------------------------------------

Spatial Point Pattern Analysis involves evaluating the pattern or distribution of a set of points on a surface. These points can represent the locations of:

-   Events, such as crimes, traffic accidents, or disease outbreaks, or

-   Business services, like coffee shops and fast food outlets, or facilities such as childcare and eldercare centers.

The specific questions we would like to answer are as follows:

-   are the childcare centres in Singapore randomly distributed throughout the country?

-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

# 2.0 Downloading the Data setsss

------------------------------------------------------------------------

To provide answers to the questions above, three data sets will be used. They are:

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format. [Link here](https://data.gov.sg/datasets?query=child&page=1&coverage=&formats=GEOJSON&resultId=d_5d668e3f544335f8028f546827b773b4)

-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg. [Link here](https://data.gov.sg/datasets?query=subzone&page=1&coverage=&resultId=d_d14da225fccf921049ab64238ff473d9)

-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format. Link here

# 3.0 Installing and loading R packages

------------------------------------------------------------------------

In this hands-on exercise, five R packages will be used, they are:

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   [**spatstat**](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.

-   [**raster**](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e.Â raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.

-   [**maptools**](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert *Spatial* objects into *ppp* format of **spatstat**.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.

Use the code chunk below to install and launch the five R packages.

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse, rvest, geojsonsf)
```

# 4.0 Spatial Data Wrangling

## 4.1 Importing Spatial Data

::: panel-tabset
### Childcare data

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)

```

### Costal Outline

```{r}
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

### mp14_subzone

```{r}
mpsz_sf <- st_read(dsn = "data", layer = "MP14_SUBZONE_WEB_PL")
```
:::

### 4.1.1 DIY:Use the appropriate SF function to retrieve the referencing system information of these geospatial data.

Simple, use the `st_crs` function from SF to check and print the crs information

```{r}
# Retrieve CRS information
childcare_crs <- st_crs(childcare_sf)
sg_crs <- st_crs(sg_sf)
mpsz_crs <- st_crs(mpsz_sf)

# Print CRS information
print(childcare_crs)
print(sg_crs)
print(mpsz_crs)
```

### 4.1.2 DIY: Assign the correct CRS to MPSZ_SF and SG_SF Simple Feature Data frames.

notice that the MPSZ_SF and SG_SF is in `World Geodetic System 1984` format, we need set the correct crs to these data and we can do so using the st transform. We can do so using the transform method

::: panel-tabset
### Changing to CRS

```{r}
mpsz_sf <- st_read(dsn = "data", layer = "MP14_SUBZONE_WEB_PL") %>%
  st_transform(crs = 3414)

sg_sf <- st_read(dsn = "data", layer = "CostalOutline") %>%
  st_transform(crs = 3414)
```

### Check if its the right CRS

```{r}
print(st_crs(mpsz_sf))
print(st_crs(sg_sf))
```
:::

### 4.1.3 Change the referencing System to Singapore National Projected Coordinate System

::: callout-note
**Understanding the CRS in Our Data:**

1.  **MPZ and Coastal Data:**

    -   **CRS**: `SVY21`, which is the Singapore National Projected Coordinate System based on WGS84.

    -   **Description**: This is a common projected coordinate system used in Singapore for accurate mapping.

2.  **Childcare Data:**

    -   **CRS**: `SVY21 / Singapore TM` (Transverse Mercator projection).

    -   **Description**: This is also a projection based on SVY21, specifically using the Transverse Mercator projection. It is very close to the SVY21 system, with minor differences in how the projection is handled.

Given that the map file serves as the base, we want all spatial data to overlay correctly, we should:

1.  **Transform the GeoJSON Data to Match the Map File's CRS**:

    -   Since our MPZ and Coastal data are already in `SVY21` (EPSG:3414), transform the GeoJSON data to `EPSG:3414` as well.

2.  **Rationale**:

    -   This approach ensures that the childcare locations from the GeoJSON data will be accurately plotted within the boundaries and context provided by the map file (MPZ and Coastal data).

    -   It avoids potential issues with misalignment, especially since oour base map data is already set up in a local projection suitable for Singapore.
:::

```{r}
# Transform Childcare data to match the base map's CRS (EPSG:3414)
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)

# Now, all datasets should be aligned in the same CRS
```

### 4.1.4 Checking for validity of maps

When working with spatial data, it's crucial to ensure that all geometries are valid. Invalid geometries can cause errors in analysis and visualization.

1.  **Checking Validity with `st_is_valid()`**:
2.  **Identifying Invalid Geometries**:
3.  **Fixing Invalid Geometries with `st_make_valid()`**

::: panel-tabset
### MPZ

```{r}
mpsz_validity <- st_is_valid(mpsz_sf)
mpsz_invalid <- which(!mpsz_validity)
if (length(mpsz_invalid) > 0) {
  print("MPZ Invalid!")
  print(mpsz_sf[mpsz_invalid, ])
} else {
  print("it's valid!")
}
```

Notice that MPZ has 9 invalidity of sub zones here, so we have to make it valid through the function make valid. Once it's valid we then check again

```{r}
mpsz_sf <- st_make_valid(mpsz_sf)
mpsz_validity <- st_is_valid(mpsz_sf)
mpsz_invalid <- which(!mpsz_validity)
if (length(mpsz_invalid) > 0) {
  print("MPZ Invalid!")
  print(mpsz_sf[mpsz_invalid, ])
} else {
  print("it's valid!")
}
```

### SG

```{r}
sg_validity <- st_is_valid(sg_sf)
sg_invalid <- which(!sg_validity)
if (length(sg_invalid) > 0) {
  print("SG Invalid!")
  print(mpsz_sf[mpsz_invalid, ])
} else {
  print("it's valid!")
}
```

In SG_SF there's one invalid as well, so we apply the fix.

```{r}
sg_sf <- st_make_valid(sg_sf)
sg_validity <- st_is_valid(sg_sf)
sg_invalid <- which(!sg_validity)
if (length(sg_invalid) > 0) {
  print("SG Invalid!")
  print(mpsz_sf[sg_invalid, ])
} else {
  print("it's valid!")
}
```

### Childcare

Notice that childcare is a geojson data and it houses it's data in the description column, we need to break this up to get more meaningful data.

We can do a simple extraction from the `Description` attribute and map the data better. Assuming that each Table Row (TR) contains a Table Head (TH) and a Table Data (TD), we can map the data accordingly.

```{r}
childcare_validity <- st_is_valid(childcare_sf)
childcare_invalid <- which(!childcare_validity)
if (length(childcare_invalid) > 0) {
  print("ChildCare Invalid!")
  print(childcare_sf[childcare_invalid, ])
} else {
  print("it's valid!")
}


# Ensure the geometry column is preserved
geometry_column <- st_geometry(childcare_sf)
parse_description <- function(html_string) {
  html <- read_html(html_string)
  html <- html %>% html_nodes("tr") %>% .[!grepl("Attributes", .)]
  headers <- html %>% html_nodes("th") %>% html_text(trim = TRUE)
  values <- html %>% html_nodes("td") %>% html_text(trim = TRUE)
  
  # Handle cases where the number of headers and values don't match
  if (length(headers) != length(values)) {
    max_length <- max(length(headers), length(values))
    headers <- c(headers, rep("ExtraHeader", max_length - length(headers)))
    values <- c(values, rep("NULL", max_length - length(values)))
  }
  
  setNames(values, headers)
}

# Apply parsing function, unnest the description fields, and remove the original 'Description' column
childcare_sf <- childcare_sf %>% 
  mutate(Description_parsed = map(Description, parse_description)) %>%
  unnest_wider(Description_parsed) %>%
  select(-Description)  # Remove the original 'Description' column

# Overwrite the 'Name' column with the 'LANDYADDRESSPOINT' column values
childcare_sf <- childcare_sf %>%
  mutate(Name = NAME)  # Overwrite 'Name' with 'LANDYADDRESSPOINT'

# Replace empty strings or NA across all columns with "NULL"
childcare_sf <- childcare_sf %>%
  mutate(across(!geometry, ~ ifelse(is.na(.) | . == "", "NULL", .)))

# Reassign the geometry to the dataframe
st_geometry(childcare_sf) <- geometry_column
# Ensure it's still an sf object
class(childcare_sf)
```
:::

## 4.2 Mapping the geospatial datasets.

::: panel-tabset
### DIY PLOT Map

Using the mapping methods you learned in Hands-on Exercise 3, prepare a static map

```{r}
# Suppress the tmap mode message
suppressMessages({
  tmap_mode("plot")  # Use "view" for an interactive map or "plot" for a static map
})

# Create the map
tm <- tm_shape(mpsz_sf) + 
  tm_polygons(col = "grey", border.col = "black", alpha = 0.5) +  # Base map with subzones
  tm_shape(childcare_sf) + 
  tm_dots(col = "black", size = 0.05) +  # Plot childcare locations as dots
   tm_layout(
    main.title = "Childcare Locations on Singapore Map",
    main.title.position = c("center"),  # Center the title at the top
    outer.margins = c(0.1, 0, 0, 0),  # Adjust outer margins to make space for the title
    legend.outside = TRUE,  # Keep legend outside the map area
    legend.outside.position = "bottom"  # Position the legend at the bottom
  )
tm
```

### DIY View Interactivity

we can also prepare a pin map by using the code chunk below.

```{r}
suppressMessages({
  tmap_mode("view")  # Use "view" for an interactive map or "plot" for a static map
})

tm <- tm_shape(mpsz_sf) + 
  tm_polygons(col = "grey", border.col = "black", alpha = 0.5) +  # Base map with subzones
  tm_shape(childcare_sf) + 
  tm_dots(col = "black", size = 0.05) +  # Plot childcare locations as dots
   tm_layout(
    title = "Childcare Locations on Singapore Map",
    title.position = c("center"),  # Center the title at the top
    outer.margins = c(0.1, 0, 0, 0),  # Adjust outer margins to make space for the title
    legend.outside = TRUE,  # Keep legend outside the map area
    legend.outside.position = "bottom"  # Position the legend at the bottom
  )

tm
```
:::

# 5.0 Spatial Class Mapping

## 5.1 Data frame to Spatial Class

Use `as_Spatial()` to convert the data from dataframe to spatial class, we can check so using the `class` function or simply display it.

::: panel-tabset
### Childcare

```{r}
childcare <- as_Spatial(childcare_sf)
childcare
class(childcare)
```

### Mpsz

```{r}
mpsz <- as_Spatial(mpsz_sf)
mpsz
class(mpsz)
```

### SG

```{r}
sg <- as_Spatial(sg_sf)
sg
class(sg)

```
:::

## 5.2 Converting Spatial Class into generic PPP Format

As **Spatstat** requires analytical data in ***ppp*** object form. We have to map the data to a ***PPP*** object. The following steps breakdown the method to convert a SF to PPP object.

-   **Extract Coordinates (`st_coordinates(childcare_sf)`):**\
    This step extracts the x (longitude) and y (latitude) coordinates from the `sf` object. The result is a matrix with two columnsâone for each coordinate. These coordinates represent the location of each point in our spatial dataset.

<!-- -->

-   **Get Bounding Box (`st_bbox(childcare_sf)`):**\
    This function retrieves the bounding box of the `sf` object, which is the smallest rectangle that can enclose all the points in the dataset. The bounding box provides the minimum and maximum x and y values (`xmin`, `xmax`, `ymin`, `ymax`)

-   **Create Observation Window (`owin()`):**\
    Using the bounding box values, you create an observation window. This window defines the spatial limits (study area) for the point pattern analysis. It ensures that all points lie within these specified boundaries.

-   **Create `ppp` Object (`ppp()`):**\
    Finally, we combine the extracted coordinates and the defined observation window into a `ppp` object using the `ppp()` function. The `ppp` object is the required format for analyzing point patterns in the `spatstat` package, enabling us to conduct spatial analyses on our data.

```{r}
# Extract coordinates
childcare_coords <- st_coordinates(childcare_sf)

# Define the window using the bounding box
childcare_bbox <- st_bbox(childcare_sf)
childcare_window <- owin(xrange = childcare_bbox[c("xmin", "xmax")], yrange = childcare_bbox[c("ymin", "ymax")])

# Create the ppp object
childcare_ppp <- ppp(x = childcare_coords[, 1], y = childcare_coords[, 2], window = childcare_window)

# Check the ppp object
summary(childcare_ppp)
plot(childcare_ppp)
```

## 5.3 Checking for duplicate data.

### 5.3.1 Code to analyse for duplicate data.

::: panel-tabset
### Check For Any Duplicate

```{r}
any(duplicated(childcare_ppp))
```

### Count No. of co-indicence point

```{r}
multiplicity(childcare_ppp)
```

### Location With \> 1 Point Event

```{r}
sum(multiplicity(childcare_ppp) > 1)
```
:::

### 5.3.2 Spot duplicate points from the map

```{r}
# Identify duplicates in the ppp object
childcare_duplicate_indices <- duplicated(childcare_ppp)
# Extract the coordinates of duplicate points
childcare_duplicate_coords <- childcare_ppp[childcare_duplicate_indices]
# Plot the original points
plot(childcare_ppp, main = "Childcare Locations with Duplicate Points Highlighted")
# Overlay duplicate points in a different color
points(childcare_duplicate_coords$x, childcare_duplicate_coords$y, col = "red", pch = 19, cex = 0.7)
```

## 5.4 Handling Duplicates Events.

### 5.4.1 Methods to Handle Duplicates

Three Methods

-   **Deleting Duplicates (`unique_childcare_ppp`)**: Removes duplicate points, resulting in a dataset with only unique events.

<!-- -->

-   **Jittering Duplicates (`jittered_childcare_ppp`)**: Slightly perturbs duplicate points to distinguish them spatially, preventing them from overlapping completely.

-   **Unique Marks (`marked_childcare_ppp`)**: Attaches a "mark" to each point, especially duplicates, which can be used later in the analysis to account for the fact that these points were originally duplicates.

::: panel-tabset
### Delete

```{r}
unique_childcare_ppp <- childcare_ppp[!duplicated(childcare_ppp)]

# Check the ppp object after removing duplicates
summary(unique_childcare_ppp)
plot(unique_childcare_ppp, main = "Childcare Locations Without Duplicates")
```

### Jittering

```{r}
# Jitter the coordinates to handle duplicates
jittered_coords <- childcare_coords
jittered_coords[duplicated(childcare_ppp), ] <- jitter(jittered_coords[duplicated(childcare_ppp), ], amount = 0.01)

# Create a new ppp object with jittered points
jittered_childcare_ppp <- ppp(x = jittered_coords[, 1], y = jittered_coords[, 2], window = childcare_window)

# Check the ppp object after jittering
summary(jittered_childcare_ppp)
plot(jittered_childcare_ppp, main = "Childcare Locations with Jittered Duplicates")

```

### Unique Marks

```{r}
# Create marks for duplicates
marks <- rep(1, npoints(childcare_ppp))
marks[duplicated(childcare_ppp)] <- 2

# Create a new ppp object with marks attached to each point
marked_childcare_ppp <- ppp(x = childcare_coords[, 1], y = childcare_coords[, 2], window = childcare_window, marks = marks)

# Check the ppp object with unique marks
summary(marked_childcare_ppp)
plot(marked_childcare_ppp, main = "Childcare Locations with Unique Marks", cols = c("black", "red"))

```
:::

### 5.4.2 Last check for duplicates

```{r}
any(duplicated(unique_childcare_ppp))
any(duplicated(jittered_childcare_ppp))
any(duplicated(marked_childcare_ppp))
```

Notice that mark will still make it true, because there are still duplicates but marked differently.

I would use jittered from here forward

## 5.5 Creating OWIN Object

OWIN is used to represent the polygonal region, and we us the `SG_SF` to plot the map.

```{r}
sg_owin <- as.owin(sg_sf)
plot(sg_owin)
summary(sg_owin)
```

## 5.6 Combining Point events object and owin object

Extract and combine the point and polygon feaature in one ppp object.

```{r}
childcareSG_ppp = jittered_childcare_ppp[sg_owin]
summary(childcareSG_ppp)
```

Plot the map as shown below here by:

```{r}
plot(childcareSG_ppp)
```

# 6.0 First-Order Spatial Point Pattern Analysis.

In this section, wewill learn how to perform first-order SPPA by using **spatstat** package. The hands-on exercise will focus on:

-   deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes,

-   performing **Confirmatory Spatial Point Patterns Analysis** by using **Nearest Neighbour** statistics.

## 6.1 Kernel Density Estimation

### **6.1.1 Understanding KDE**

**Kernel Density Estimation (KDE)** is a non-parametric way to estimate the probability density function of a random variable. In spatial analysis, KDE is used to estimate the intensity of point patterns across a study area, which helps to identify hotspots or areas with high concentrations of events (e.g., childcare locations).

**Steps in KDE:**

1.  **Kernel Function**:

    -   The kernel function is a smooth, symmetric function (often Gaussian) that is used to estimate the density at each point. It determines how much influence each point has on the surrounding area.

    -   In the spatial context, each point in your dataset contributes to the density estimate, with its influence decreasing with distance according to the kernel function.

2.  **Bandwidth (`sigma`)**:

    -   The bandwidth parameter (`sigma`) controls the width of the kernel function. It determines the scale of smoothing:

        -   **Small bandwidth**: Results in a more detailed map with sharper peaks but may be too sensitive to noise.

        -   **Large bandwidth**: Produces a smoother map but may oversmooth the data, losing important details.

    -   Bandwidth selection is crucial for accurate density estimation. One common method for selecting bandwidth is **Diggleâs bandwidth** (`bw.diggle`), which is specifically designed for spatial point patterns.

3.  **Edge Correction**:

    -   When performing KDE on finite study areas, edge effects can bias the density estimates near the boundaries.

    -   Edge correction (`edge=TRUE`) adjusts for this by accounting for the missing density outside the boundaries, leading to more accurate results near the edges.

4.  **Density Calculation**:

    -   The KDE produces a continuous surface (usually a raster or grid) where each cell represents the estimated density of points. Higher values indicate areas with a higher concentration of points.

### 6.1.2 As Seen in Code

**Breaking Down the Code:**

1.  **`density(childcareSG_ppp, ...)`:**

    -   This function from the `spatstat` package computes the Kernel Density Estimation (KDE) for the `ppp` object `childcareSG_ppp`.

2.  **`sigma=bw.diggle`:**

    -   `sigma` specifies the bandwidth (smoothing parameter). Here, `bw.diggle` is used to automatically calculate the optimal bandwidth based on Diggle's method, which balances the trade-off between detail and smoothness.

3.  **`edge=TRUE`:**

    -   This argument enables edge correction, adjusting the density estimate near the boundaries of the study area to avoid underestimation due to the edge effect.

4.  **`kernel="gaussian"`:**

    -   Specifies the type of kernel function to use. The Gaussian kernel is the most commonly used, providing a smooth, bell-shaped curve that smoothly decreases in influence as distance from the point increases.

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
plot(kde_childcareSG_bw)
```

Retrieving the bandwidth to compute the kde layer

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

### 6.1.3 Rescaling KDE Values

```{r}
summary(childcareSG_ppp)
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
summary(childcareSG_ppp.km)


```

```{r}
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw,main = "Kernel Density Estimation of Childcare Locations (Rescaled to KM)")
```

## 6.2 working with different automatic bandwidth methods

**Bandwidth** is a crucial parameter in Kernel Density Estimation (KDE). It controls the degree of smoothing applied to the data. Different methods for selecting the bandwidth lead to different levels of smoothing, which can impact the interpretation of the density estimate.

In the `spatstat` package, several functions are available to determine the optimal bandwidth for KDE:

1.  **`bw.diggle()`**:

    -   **Purpose**: Designed for spatial point patterns, it aims to balance the trade-off between bias and variance in the density estimate.

    -   **Characteristics**: Often produces a good balance between under- and over-smoothing, making it suitable for general spatial analysis.

2.  **`bw.CvL()`** (Cronie and Van Lieshout):

    -   **Purpose**: This method minimizes the integrated squared error between the true intensity function and the estimated intensity function.

    -   **Characteristics**: It's particularly good for minimizing error over the entire study area, but it can be sensitive to the overall distribution of points.

3.  **`bw.scott()`** (Scottâs Rule):

    -   **Purpose**: Based on Scottâs rule of thumb, this method provides a bandwidth that scales with the number of points and the dimension of the data.

    -   **Characteristics**: Often results in a conservative (wider) bandwidth, leading to smoother density estimates that may miss finer details.

4.  **`bw.ppl()`** (Likelihood Cross-Validation):

    -   **Purpose**: This method uses cross-validation to select a bandwidth that maximizes the likelihood of the observed data under the KDE model.

    -   **Characteristics**: It tends to focus on how well the bandwidth explains the data, often leading to a finer, more detailed density estimate.

::: panel-tabset
### CvL

```{r}
bw.CvL(childcareSG_ppp.km)
```

### Scott

```{r}
bw.scott(childcareSG_ppp.km)
```

### PPL

```{r}
bw.ppl(childcareSG_ppp.km)
```

### diggle

```{r}
bw.diggle(childcareSG_ppp.km)
```
:::

```{r}
# Perform Kernel Density Estimation with different bandwidth selection methods
kde_childcareSG.ppl <- density(childcareSG_ppp.km, sigma=bw.ppl, edge=TRUE, kernel="gaussian")
kde_childcareSG.scott <- density(childcareSG_ppp.km, sigma=bw.scott, edge=TRUE, kernel="gaussian")
kde_childcareSG.CvL <- density(childcareSG_ppp.km, sigma=bw.CvL, edge=TRUE, kernel="gaussian")
kde_childcareSG.diggle <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")


layout(matrix(c(1, 2, 3, 4), 2, 2, byrow = TRUE), widths = c(1, 1), heights = c(1, 1))
# Set margins to the minimum (bottom, left, top, right)
par(mar = c(2, 2, 2, 2), oma = c(0, 0, 0, 0))
# Plot the results for comparison
par(mfrow=c(2,2))  # Arrange plots in a 2x2 grid
plot(kde_childcareSG.diggle, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
plot(kde_childcareSG.CvL, main = "bw.CvL")
plot(kde_childcareSG.scott, main = "bw.scott")


```

## 6.3 working with different kernel methods.

| Kernel Method | Shape                    | Characterisitics                                                                                           |
|---------------|--------------------------|------------------------------------------------------------------------------------------------------------|
| Gaussian      | Bell shaped- normal      | Very smooth, widely used, good for most applications, but might oversmooth and miss finer details.         |
| Epanechnikov  | Parabolic                | Efficient, minimizes estimation error, compact support (affects nearby points), less smooth than Gaussian. |
| Quartic       | Bell Shape with flat top | Balanced smoothness and efficiency, compact support, focuses on nearby points, similar to Epanechnikov.    |
| Uniform       | Rectangle                | Simple and fast, gives equal weight within a certain distance, but produces rougher estimates.             |

```{r}
layout(matrix(c(1, 2, 3, 4), 2, 2, byrow = TRUE), widths = c(1, 1), heights = c(1, 1))

# Set margins to the minimum (bottom, left, top, right)
par(mar = c(2, 2, 2, 2), oma = c(0, 0, 0, 0))

plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

# 7.0 Fixed and Adaptive KDE

Using a bandwidth of 600 meter with the segma value of 0.6 as the unit of measurement is in kilometer, hence 600m is 0.6km

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

## 7.1 Compute KDE using adaptive bandwidth

derive adaptive kernel density estimation by usingÂ [*density.adaptive()*](https://rdrr.io/cran/spatstat/man/adaptive.density.html)Â ofÂ **spatstat**. we can adaptively display

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

Comparing it side by side

```{r}
suppressMessages({
  tmap_mode("plot")  # Use "view" for an interactive map or "plot" for a static map
})

par(mfrow = c(1, 2), mar = c(2, 2, 2, 2), oma = c(0, 0, 0, 0))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

## 7.3 Converting KDE output into GRID Object

```{r}
kde_df <- as.data.frame(kde_childcareSG.bw)
coordinates(kde_df) <- ~x+y
gridded(kde_df) <- TRUE
# Now we have a SpatialGridDataFrame
kde_SpatialGrid <- as(kde_df, "SpatialGridDataFrame")
spplot(kde_SpatialGrid, main = "Kernel Density Estimation (bw.diggle)")
```

### 7.3.1 Coverting grid output into raster

```{r}

kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
kde_childcareSG_bw_raster
```

### 7.3.2 Assigning Projection Systems

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

## 7.4 Visualizing the Output Map

```{r}
suppressMessages({
  tmap_mode("plot")  # Use "view" for an interactive map or "plot" for a static map
})

tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

## 7.5 Comparing Spatial Point Patterns Using KDE

Focused on KDE childcare at ponggol, tampines, chua chu kang and jurong west these are the planning areas we would like to epxlore further

### 7.5.1 Extracting the study area

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

::: panel-tabset
### Punggol

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
```

### Tampines

```{r}
plot(tm, main = "Tampines")
```

### Choa Chu Kang

```{r}
plot(ck, main.title = "Choa Chu Kang")
```

### Jurong West

```{r}
plot(jw, main = "Jurong West")

```
:::

### 7.5.2 Creating the `owin` object

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

### 7.5.3 Combining the childcare points and study area

```{r}
childcare_pg_ppp = jittered_childcare_ppp[pg_owin]
childcare_tm_ppp = jittered_childcare_ppp[tm_owin]
childcare_ck_ppp = jittered_childcare_ppp[ck_owin]
childcare_jw_ppp = jittered_childcare_ppp[jw_owin]
```

Next, *rescale.ppp()* function is used to trasnform the unit of measurement from metre to kilometre.

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

plot the maps

```{r}
# Adjust margins and layout
layout(matrix(c(1, 2, 3, 4), 2, 2, byrow = TRUE), widths = c(1, 1), heights = c(1, 1))
# Set margins to the minimum (bottom, left, top, right)
par(mar = c(2, 2, 2, 2), oma = c(0, 0, 0, 0))
# Plot the point patterns
plot(childcare_pg_ppp.km, main = "Punggol", cex.main = 5)
plot(childcare_tm_ppp.km, main = "Tampines", cex.main = 5)
plot(childcare_ck_ppp.km, main = "Choa Chu Kang", cex.main = 5)
plot(childcare_jw_ppp.km, main = "Jurong West", cex.main = 5)
```

### 7.5.4 computing the kde

```{r}
layout(matrix(c(1, 2, 3, 4), 2, 2, byrow = TRUE), widths = c(1, 1), heights = c(1, 1))
# Set margins to the minimum (bottom, left, top, right)
par(mar = c(2, 2, 2, 2), oma = c(0, 0, 0, 0))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
```

### 7.5.5 Computing fixed bandwidth KDE

For comparison purposes, we will use 250m as the bandwidth.

```{r}
layout(matrix(c(1, 2, 3, 4), 2, 2, byrow = TRUE), widths = c(1, 1), heights = c(1, 1))

# Set margins to the minimum (bottom, left, top, right)
par(mar = c(2, 2, 2, 2), oma = c(0, 0, 0, 0))

plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

# 8.0 Nearest Neighbor Analysis

we will perform the Clark-Evans test of aggregation for a spatial point pattern by using [*clarkevans.test()*](https://www.rdocumentation.org/packages/spatstat/versions/1.63-3/topics/clarkevans.test) of **statspat**.

The test hypotheses are:

Ho = The distribution of childcare services are randomly distributed.

H1= The distribution of childcare services are not randomly distributed.

The 95% confident interval will be used.

## 8.1 **Testing spatial point patterns using Clark and Evans Test**

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

> -   **R = 0.55631:** The observed mean nearest-neighbor distance is significantly smaller than the expected distance under CSR, indicating clustering.
>
> -   **p-value \< 2.2e-16:** The p-value is extremely small, which strongly suggests that the null hypothesis (random distribution) should be rejected.
>
> -   **Conclusion:** Based on these results, we reject the null hypothesis and accept the alternative hypothesis that the distribution of childcare services is clustered.

## 8.2 **Clark and Evans Test: Choa Chu Kang planning area**

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

**Hypotheses for the Clark-Evans Test**

**Null Hypothesis (Ho):**

-   The distribution of childcare services in the Choa Chu Kang region (`childcare_ck_ppp`) is **randomly distributed**. This means there is no significant clustering or regular spacing in the locations of the childcare services; they follow a pattern consistent with complete spatial randomness (CSR).

**Alternative Hypothesis (H1):**

-   The distribution of childcare services in the Choa Chu Kang region is **not randomly distributed**. This means there is a significant deviation from randomness, which could be either clustering (points are closer together than expected) or regular spacing (points are further apart than expected).

**Test Results**

**Test Statistic (R):**

-   **R = 0.91416**: The ratio of the observed mean nearest-neighbor distance to the expected mean distance under CSR is close to 1. This indicates that the observed distribution of points is fairly similar to what would be expected under a random distribution, with a slight indication of clustering (since R is slightly less than 1), but not strong enough to be statistically significant.

**p-value:**

-   **p-value = 0.1996**: The p-value is greater than the typical alpha level of 0.05, indicating that the observed pattern could reasonably occur under the null hypothesis (random distribution). In other words, there isn't enough evidence to reject the null hypothesis.

**Conclusion**

-   **Fail to Reject the Null Hypothesis**: Since the p-value is 0.1996 (which is greater than 0.05), we **do not reject the null hypothesis**. This means we do not have sufficient evidence to conclude that the distribution of childcare services in Choa Chu Kang is significantly different from random.

-   **Interpretation**:

    -   **R = 0.91416** suggests a slight tendency towards clustering, but this is not statistically significant.

    -   The p-value of 0.1996 suggests that any apparent clustering could be due to random variation, and there is no strong evidence of a non-random (clustered or regular) distribution pattern

## 8.3 **Clark and Evans Test: Tampines planning area**

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

**Null Hypothesis (Ho):**

-   The distribution of childcare services in the Tampines region is **randomly distributed**. This means there is no significant clustering or regular spacing in the locations of the childcare services; they follow a pattern consistent with complete spatial randomness (CSR).

**Alternative Hypothesis (H1):**

-   The distribution of childcare services in the Tampines region is **not randomly distributed**. This means there is a significant deviation from randomness, which could be either clustering (points are closer together than expected) or regular spacing (points are further apart than expected).

**Interpreting the Results**

**Test Statistic (R):**

-   **R = 0.77989**: The ratio of the observed mean nearest-neighbor distance to the expected mean distance under CSR is less than 1. This indicates that the points are closer together than they would be under a random distribution, suggesting some level of clustering.

**p-value:**

-   **p-value = 7.113e-05**: The p-value is very small, significantly less than the typical alpha level of 0.05. This indicates that the probability of observing this pattern of points under the null hypothesis (random distribution) is extremely low.

**Conclusion:**

-   Since the p-value is much smaller than 0.05, we **reject the null hypothesis**. The result supports the alternative hypothesis that the distribution of childcare services in the Tampines region is **not randomly distributed**.

    -   **Given that R \< 1**, this deviation from randomness is specifically indicative of **clustering**. The childcare services are more tightly grouped together than would be expected if they were randomly distributed.

# Second Order Spatial Point Patterns Analysis

# 9.0 A**nalysing Spatial Point Process Using G-Function**

The G function measures the distribution of the distances from an arbitrary event to its nearest event.Â 

How to compute G-function estimation by usingÂ [*Gest()*](https://rdrr.io/cran/spatstat/man/Gest.html)Â ofÂ **spatstat**Â package. You will also learn how to perform monta carlo simulation test usingÂ [*envelope()*](https://rdrr.io/cran/spatstat/man/envelope.html)Â ofÂ **spatstat**Â package.

## **9.1 Choa Chu Kang planning area**

### 9.1.1 Computing G-function estimation

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

### 9.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

> Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.
>
> H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-function

**`envelope()`**: Generates a comparison between observed and expected patterns under CSR by simulating many possible outcomes and calculating the range of these simulations.

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

### 9.1.3 Analyzing the result

```{r}
# Calculate the p-value based on the envelope
p_value <- mean(G_CK.csr$obs < G_CK.csr$lo | G_CK.csr$obs > G_CK.csr$hi)
# Print the P value
print(paste("P value =", p_value))

```

**Key Elements in the Plot:**

-   **Black Line (`G_obs(r)`)**: Represents the observed G-function, showing the cumulative distribution of the nearest neighbor distances in your actual data.

-   **Red Dashed Line (`G_theo(r)`)**: Represents the theoretical G-function under CSR, showing what the distribution of nearest neighbor distances would look like if the points were randomly distributed.

-   **Gray Envelope**: Represents the range of G-function values generated from simulations under CSR, providing a visual benchmark for assessing the significance of deviations in the observed G-function.

**What the Plot Tells Us:**

-   **Observed G-function Above the Theoretical G-function**: In our plot, the black line (`G_obs(r)`) is mostly above the red dashed line (`G_theo(r)`), indicating that the observed points are closer together (more clustered) than what would be expected under CSR.

-   **Observed G-function Outside the CSR Envelope**: When the black line moves outside the gray envelope (particularly above it), this suggests that the clustering is statistically significant.

**Results**

-   **Clustering**: The observed G-function (`G_obs(r)`) being above the theoretical G-function (`G_theo(r)`) and often outside the CSR envelope indicates significant clustering of the childcare services in the Choa Chu Kang area.

-   **Statistical Significance**: The p-value of 0.025 confirms that this clustering is statistically significant, meaning that the spatial distribution of childcare centers in this area is not random but rather clustered.

## **9.2 Tampines planning area**

### 9.2.1 Computing G-function estimation

The `"best"` option allows `spatstat` to choose the most suitable edge correction method for the specific point pattern you are analyzing. This is particularly useful if you're unsure which correction method is optimal for your data.

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

### 9.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

> Ho = The distribution of childcare services at Tampines are randomly distributed.
>
> H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
plot(G_tm.csr)
```

### 9.2.3 Analyzing the result

```{r}
# Calculate the p-value based on the envelope 
p_value <- mean(G_tm.csr$obs < G_tm.csr$lo | G_tm.csr$obs > G_tm.csr$hi) 
# Print the P value 
print(paste("P value =", p_value)) 
```

**Key Observations from the Plot:**

-   **Black Line (`G_obs(r)`) Above Red Dashed Line (`G_theo(r)`):** This indicates that the observed points (childcare services in Tampines) are generally closer to each other than would be expected under CSR, suggesting clustering.

-   **Black Line Partially Outside the Gray Envelope:** The observed G-function steps outside the CSR envelope at some distances, suggesting that the observed clustering is statistically significant at those distances.

**p-value:**

-   **p-value = 0.037**: This p-value indicates that there is a 3.7% chance of observing such a distribution (or one more extreme) under the null hypothesis of random distribution. Since this p-value is below the common significance threshold of 0.05, we can conclude that the observed pattern is unlikely to be due to random chance.

**Conclusion:**

-   **Reject the Null Hypothesis (Ho)**: Given the p-value of 0.037, we reject the null hypothesis that the distribution of childcare services in Tampines is randomly distributed.

-   **Accept the Alternative Hypothesis (H1)**: The data suggests that the distribution of childcare services in Tampines is not random. Specifically, the observed G-function shows clustering, where the childcare centers are closer to each other than would be expected under a random distribution.

# 10.0 **Analysing Spatial Point Process Using F-Function**

The **F-function** (also known as the **empty space function**) is a spatial summary function that describes the distribution of distances from an arbitrary point in the study region (which may not necessarily be a data point) to the nearest data point in the spatial pattern.

-   The F-function helps to assess the **clustering** or **dispersion** of a point pattern by evaluating the proximity of random locations in the study area to the nearest observed event (such as a childcare center).

-   It is often used in conjunction with the G-function to get a fuller picture of the spatial structure of the point pattern.

## 10.1 **Choa Chu Kang planning area**

### 10.1.1 Computing F-function estimation

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

### 10.1.2 **Performing Complete Spatial Randomness Test**

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

> Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.
>
> H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-function

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
plot(F_CK.csr)
```

### 10.1.3 Analyzing the result

```{r}
p_value <- mean(F_CK.csr$obs < F_CK.csr$lo | F_CK.csr$obs > F_CK.csr$hi)
# Print the p-value
print(paste("P-value =", p_value))
```

**Key Observations:**

-   **F_obs(r) Below the Envelope**:

    -   The observed F-function (`F_obs(r)`) lies entirely below the gray CSR envelope across almost all distances `r`. This suggests that the nearest neighbor distances from random locations to the nearest childcare center are generally larger than expected under CSR.

    -   In practical terms, this means that the points (childcare centers) are more dispersed than would be expected if they were randomly distributed, indicating a tendency toward regular spacing.

-   **p-value of 0**:

    -   A p-value of 0 indicates that in all 999 simulations, the observed F-function fell outside the envelope. This is a strong statistical signal that the observed pattern deviates significantly from randomness.

    -   Since the observed F-function is consistently below the CSR envelope, it suggests that the observed pattern is significantly more dispersed (regular) than would be expected under a random distribution.

**Conclusion:**

-   **Reject the Null Hypothesis (Ho)**:

    -   Given that the p-value is 0, we reject the null hypothesis that the distribution of childcare services in Choa Chu Kang is randomly distributed.

-   **Accept the Alternative Hypothesis (H1)**:

    -   The observed spatial pattern of childcare services in Choa Chu Kang is not random. The F-function analysis suggests that the pattern is significantly more dispersed than expected under CSR, indicating a regular spacing of childcare centers rather than clustering or randomness.

## 10.2 **Tampines planning area**

### 10.2.1 Computing F-function estimation

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

### 10.2.2 **Performing Complete Spatial Randomness Test**

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

> Ho = The distribution of childcare services at Tampines are randomly distributed.
>
> H1= The distribution of childcare services at Tampines are not randomly distributed

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-function

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
plot(F_tm.csr)
```

### 10.2.3 Analyzing the result

```{r}
p_value <- mean(F_tm.csr$obs < F_tm.csr$lo | F_tm.csr$obs > F_tm.csr$hi) 
# Print the p-value 
print(paste("P-value =", p_value))
```

**Key Observations:**

-   **F_obs(r) Below the Theoretical Line and Envelope**:

    -   The observed F-function (`F_obs(r)`) is mostly below the theoretical F-function (`F_theo(r)`) and falls below the lower bound of the CSR envelope. This suggests that the nearest neighbor distances from random locations to the nearest childcare center are generally larger than expected under CSR, indicating a tendency towards regular spacing.

-   **p-value = 0.657**:

    -   The p-value of 0.657 suggests that there is no significant deviation from the null hypothesis of randomness. A p-value this high indicates that the observed spatial distribution is consistent with what would be expected under CSR.

Conclusion:

-   **Fail to Reject the Null Hypothesis (Ho)**:

    -   Given the p-value of 0.657, we **fail to reject the null hypothesis** that the distribution of childcare services in Tampines is randomly distributed.

-   **Interpretation**:

    -   The observed F-function does not show significant deviation from the theoretical F-function under CSR. The high p-value indicates that any observed regularity or dispersion in the spatial distribution of childcare services in Tampines is likely due to random variation, rather than a systematic pattern.

# **11.0 Analysing Spatial Point Process Using K-Function**

The **K-function** is a second-order spatial point process statistic used to describe the spatial distribution of points in a given area. Unlike the G-function and F-function, which focus on nearest neighbor distances, the K-function considers all pairwise distances between points within a specified distance rrr. This provides a more comprehensive measure of spatial clustering or dispersion over different scales.

**Purpose of the K-function:**

-   The K-function helps determine whether points are **clustered**, **dispersed**, or **randomly distributed** across a range of distances.

-   It provides insights into the **degree and scale** of clustering or regularity in a point pattern.

## 11.1 **Choa Chu Kang planning area**

### 11.1.1 Computing K-function estimation

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

### 11.1.2 **Performing Complete Spatial Randomness Test**

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

> Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.
>
> H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with K-function

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

### 11.1.3 Analyzing the result

```{r}
p_value <- mean(K_ck.csr$obs < K_ck.csr$lo | K_ck.csr$obs > K_ck.csr$hi) 
# Print the p-value 
print(paste("P-value =", p_value))
```

Key Observations:

-   **K_obs(r) Above the Theoretical Line**:

    -   The observed K-function (`K_obs(r) - r`) is slightly above the theoretical K-function (`K_theo(r) - r`), particularly at larger distances. This suggests that there might be some clustering in the distribution of childcare centers at larger scales, as more pairs of points are found within these distances than expected under CSR.

-   **K_obs(r) Within the CSR Envelope**:

    -   The observed K-function mostly remains within the CSR envelope, although it tends to approach the upper bound of the envelope at larger distances. This indicates that while there is some indication of clustering, the deviation is not statistically significant across all distances.

p-value = 0.113:

-   **p-value of 0.113**:

    -   The p-value of 0.113 indicates that there is an 11.3% chance of observing such a distribution (or one more extreme) under the null hypothesis of random distribution. This p-value is above the common significance threshold of 0.05, meaning that we do not have strong enough evidence to reject the null hypothesis.

Conclusion:

-   **Fail to Reject the Null Hypothesis (Ho)**:

    -   Given the p-value of 0.113, we **fail to reject the null hypothesis** that the distribution of childcare services in Choa Chu Kang is randomly distributed.

-   **Interpretation**:

    -   While the K-function suggests some mild clustering, especially at larger distances, the observed pattern does not deviate significantly from what would be expected under CSR. The p-value supports this conclusion, indicating that any clustering observed is not statistically significant at the 5% level.

## 11.2 **Tampines planning area**

### 11.2.1 Computing K-function estimation

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

### 11.2.2 **Performing Complete Spatial Randomness Test**

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

> Ho = The distribution of childcare services at Tampines are randomly distributed.
>
> H1= The distribution of childcare services at Tampines are not randomly distributed

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-function

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

### 11.2.3 Analyzing the result

```{r}
p_value <- mean(K_tm.csr$obs < K_tm.csr$lo | K_tm.csr$obs > K_tm.csr$hi) 
# Print the p-value 
print(paste("P-value =", p_value))
```

**Key Observations:**

-   **K_obs(r) Significantly Above the Theoretical Line and Envelope:**

    -   The observed K-function (`K_obs(r) - r`) is consistently above the theoretical K-function (`K_theo(r) - r`) and lies well above the upper bound of the CSR envelope, especially as distance rrr increases. This strong deviation indicates a significant clustering of points at varying distances, particularly at larger scales.

-   **p-value of 0.998:**

    -   The extremely high p-value of 0.998 suggests that the observed pattern is consistent with the null hypothesis of CSR. However, given the context and the K-function being well above the envelope, this might seem counte rintuitive. This high p-value typically indicates that the observed pattern is not significantly different from CSR, but the visual evidence in the plot suggests otherwise.

**Conclusion:**

-   **Fail to Reject the Null Hypothesis (Ho):**

    -   Given the p-value of 0.998, we would typically fail to reject the null hypothesis that the distribution of childcare services in Tampines is randomly distributed.

-   **Interpretation:**

    -   Despite the high p-value, the plot clearly shows that the observed K-function is consistently and significantly above the CSR envelope, indicating clustering. This discrepancy between the p-value and visual interpretation could result from a peculiarity in the data or the way the p-value was calculated. It's essential to consider both statistical results and visual evidence when drawing conclusions.

# **12.0 Analysing Spatial Point Process Using L-Function**

The **L-function** is a transformation of the K-function that linearizes it, making it easier to interpret. The K-function often increases quadratically with distance, which can be challenging to interpret directly. By transforming the K-function into the L-function, we obtain a function that grows linearly under Complete Spatial Randomness (CSR), which simplifies the detection of clustering or dispersion in spatial point patterns.

**Purpose of the L-function:**

-   The L-function helps identify whether points in a spatial pattern are **clustered**, **regularly spaced**, or **randomly distributed**.

-   The transformation provides a clearer visual representation, as deviations from linearity (a straight line) are easier to detect and interpret.

## 12.1 **Choa Chu Kang planning area**

### 12.1.1 Computing L-function estimation

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

### 12.1.2 **Performing Complete Spatial Randomness Test**

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

> Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.
>
> H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with L-function

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")

```

### 11.1.3 Analyzing the result

```{r}

clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)

p_value <- mean(L_ck.csr$obs < L_ck.csr$lo | L_ck.csr$obs > L_ck.csr$hi)  
# Print the p-value  
print(paste("P-value =", p_value))
```

**Key Observations:**

-   **L_obs(r) Fluctuations**:

    -   The observed L-function (`L_obs(r) - r`) fluctuates around the theoretical line (`L_theo(r) - r = 0`) and within the CSR envelope for most of the distance range.

    -   In the early part of the plot (small distances), the observed L-function dips below the envelope briefly, indicating some regularity or dispersion at very small scales.

-   **Mostly Within the CSR Envelope**:

    -   For the majority of distances rrr, the observed L-function stays within the CSR envelope, suggesting that the observed pattern does not significantly deviate from randomness at these scales.

-   **p-value of 0.051**:

    -   The p-value of 0.051 is very close to the common significance threshold of 0.05. This p-value indicates that there is a 5.1% chance of observing such a distribution (or one more extreme) under the null hypothesis of random distribution.

    -   Although the p-value is slightly above the threshold, it suggests a marginal significance, meaning that the observed pattern might be slightly more regular or dispersed than what would be expected under CSR.

**Conclusion:**

-   **Marginal Result**:

    -   Given the p-value of 0.051, we **fail to reject the null hypothesis** at the 5% significance level, but it's very close. This suggests that the evidence is not strong enough to confidently assert that the distribution is non-random.

    -   However, the proximity of the p-value to 0.05 indicates that the observed pattern is on the verge of being considered significantly different from CSR, possibly indicating some degree of regularity or dispersion, especially at smaller scales.

## 12.2 **Tampines planning area**

### 12.2.1 Computing F-function estimation

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

### 12.2.2 **Performing Complete Spatial Randomness Test**

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

> Ho = The distribution of childcare services at Tampines are randomly distributed.
>
> H1= The distribution of childcare services at Tampines are not randomly distributed

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-function

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```

### 12.2.3 Analyzing the result

```{r}
p_value <- mean(L_tm.csr$obs < L_tm.csr$lo | L_tm.csr$obs > L_tm.csr$hi)  
# Print the p-value  
print(paste("P-value =", p_value))
```

**Key Observations:**

-   **L_obs(r) Above the Theoretical Line**:

    -   The observed L-function (`L_obs(r) - r`) is consistently above the theoretical line (`L_theo(r) - r = 0`) and outside the CSR envelope across almost all distances rrr. This suggests significant clustering of childcare centers at these scales.

-   **p-value of 0.996**:

    -   The extremely high p-value of 0.996 indicates that the observed L-function does not significantly deviate from what would be expected under CSR, according to the simulations.

    -   Given alpha level of 0.001, the p-value is much higher than this threshold, meaning that there is no strong evidence to reject the null hypothesis in favor of the alternative.

Conclusion:

-   **Fail to Reject the Null Hypothesis (Ho)**:

    -   Given that the p-value of 0.996 is well above the alpha threshold of 0.001, we fail to reject the null hypothesis. This suggests that the observed distribution of childcare services in Tampines does not significantly deviate from a random distribution, according to the statistical test.
