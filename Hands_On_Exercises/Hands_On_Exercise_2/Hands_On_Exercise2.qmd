---
title: "Thematic Mapping and GeoVisualisation with R"
author: "Jiale SO"
date: "August 22, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
  message: false
  warning: false
---

Using TMap, we will learn how to plot functional and truthful choropleth maps. Through Geo visualization, we allow our audiences to understand the dataset easier with their spatial cognition.

# 1.0 Setting up the Environment

Likewise in Chapter 1, we set up the environment by installing all the required packages. We can do so using the `p_load` function from the Pacman Package.

A total of 5 packages will be used:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text files,
-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,
-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and
-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.
-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) for creating geovisualizations.

```{r}
pacman::p_load(sf, tmap, tidyverse, dplyr, gridExtra, grid)
```

# 2.0 Importing the Data into R

Two Data Set will be used here, we can retrieve it by simply clicking on the link.

1.  [Singapore Population Size](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data). This is an aspatial dataset that does not contain coordinate values. However, it includes "PA" (Planning Area) and "SZ" (Subzone) fields that can be linked to another dataset to identify the geographical areas.

2.  [Singapore Map](https://beta.data.gov.sg/datasets?query=Master+Plan+2014+Subzone+Boundary&resultId=d_d14da225fccf921049ab64238ff473d9), This dataset is used to create the base layer of the choropleth map. It contains the geographical boundaries of Singapore at the planning subzone level and is stored as an ESRI shapefile.

## 2.1 Importing the Geo-spatial Data

Simply use the `st_read()` function to import the shapefile into R.

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

### 2.1.1 Understanding the data

We can easily examine the content of `mpsz` by calling the variable:

```{r}
mpsz
```

> Question -\> Notice that only the first ten records will be displayed. Do you know why?

Only 10 records are shown because displaying a subset of rows makes it easier to inspect the data without loading the entire dataset. This optimization helps improve processing time for large datasets. Often, these first 10 records provide users with a quick preview of the dataset.

Remember, we can always explore the content of `mpsz` using the following functions. If we want to preview more than 10 records, we can simply use `head(mpsz, 20)` to view more rows.

-   **`st_geometry`**: Prints basic information about the feature class, such as the type of geometry.

-   **`glimpse`**: Displays associated attribute information in the data frame.

-   **`head`**: Reveals complete information of a feature object.

```{r}
st_geometry(mpsz)
glimpse(mpsz)
head(mpsz, n = 20)
```

Through glimpse and head, we can map the following columns to their description for ease of use.

| **Variable Name** | **Description**                                                               | **Cluster (Y/N)** | **Data Type / Example Values**                                                         |
|-------------------|-------------------------------------------------------------------------------|-------------------|----------------------------------------------------------------------------------------|
| OBJECTID          | Unique identifier for each row in the dataset.                                | N                 | `<int>` 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, …                                               |
| SUBZONE_NO        | Numeric code representing the specific subzone within the planning area.      | Y                 | `<int>` 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, …                                               |
| SUBZONE_N         | The name of the subzone (e.g., "MARINA SOUTH," "PEARL'S HILL").               | Y                 | `<chr>` "MARINA SOUTH", "PEARL'S HILL", "BOAT QUAY", …                                 |
| SUBZONE_C         | Short code representing the subzone, typically an abbreviation.               | Y                 | `<chr>` "MSSZ01", "OTSZ01", "SRSZ03", "BMSZ08", …                                      |
| CA_IND            | Indicates if the subzone is a Central Area subzone ("Y" for Yes, "N" for No). | Y                 | `<chr>` "Y", "Y", "Y", "N", "N", "N", "N", …                                           |
| PLN_AREA_N        | The name of the planning area that the subzone belongs to (e.g., "OUTRAM").   | Y                 | `<chr>` "MARINA SOUTH", "OUTRAM", "SINGAPORE RIVER", …                                 |
| PLN_AREA_C        | Short code representing the planning area (abbreviation).                     | Y                 | `<chr>` "MS", "OT", "SR", "BM", "BM", "BM", …                                          |
| REGION_N          | The name of the broader region (e.g., "CENTRAL REGION," "WEST REGION").       | Y                 | `<chr>` "CENTRAL REGION", "CENTRAL REGION", "CENTRAL REGION", …                        |
| REGION_C          | Short code representing the region (e.g., "CR" for Central Region).           | Y                 | `<chr>` "CR", "CR", "CR", "CR", "CR", "CR", …                                          |
| INC_CRC           | Internal checksum code for data integrity; not relevant for clustering.       | N                 | `<chr>` "5ED7EB253F99252E", "8C7149B9EB32EEFC", "C35FEFF02B13E0E5", …                  |
| FMEL_UPD_D        | Date when the data was last updated (e.g., "2014-12-05").                     | N                 | `<date>` 2014-12-05, 2014-12-05, 2014-12-05, …                                         |
| X_ADDR            | X coordinate of the subzone's centroid or key location.                       | Y                 | `<dbl>` 31595.84, 28679.06, 29654.96, …                                                |
| Y_ADDR            | Y coordinate of the subzone's centroid or key location.                       | Y                 | `<dbl>` 29220.19, 29782.05, 29974.66, …                                                |
| SHAPE_Leng        | The length of the subzone boundary (in meters).                               | Y                 | `<dbl>` 5267.381, 3506.107, 1740.926, …                                                |
| SHAPE_Area        | The area of the subzone (in square meters).                                   | Y                 | `<dbl>` 1630379.27, 559816.25, 160807.50, …                                            |
| geometry          | Geographic shape data (MULTIPOLYGON) representing the subzone's boundaries.   | Y                 | `<MULTIPOLYGON [m]>` MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (((29092.28 30..., … |

## 2.2 Importing Attribute Data - Singapore Population Data

We can simply use the `read_csv` function from the `readr` package:

```{r}
popdata <- read_csv("data/respopagesextod2011to2020.csv")
```

### 2.2.1 Understanding the data

We can perform the same exploration to understand this data set, or simply refer to the data source website [here](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data). For a quick analysis, use `head()` and `glimpse()`:

```{r}
head(popdata, n = 20)
glimpse(popdata, n = 2000)
```

| Column Name | Column Full Name | Description |
|-------------|------------------|-------------|
| PA          | Planning Area    |             |
| SZ          | Subzone          |             |
| AG          | Age Group        |             |
| SEX         | Sex              |             |
| TOD         | Type Of Dwelling |             |
| POP         | Resident count   |             |
| Time        | Time / Period    |             |

### 2.2.2 **Data Preparation**

Based on the data provided, we aim to create a thematic map focusing on 2020 values:

**Clustering of age group**

-   **YOUNG:** Age groups 0 to 4 until age groups 20 to 24.

-   **ECONOMY ACTIVE:** Age groups 25-29 until age groups 60-64.

-   **AGED:** Age groups 65 and above.

-   **TOTAL:** All age groups combined.

-   **DEPENDENCY:** The ratio of young and aged populations relative to the economy active population.

```{text}
Data Transformation Process
1. First get all the possible agegroup in a variable.
2. filter the data set for only 2020 values.
2. Then from there group them base on young, which is 0~4 to 20~24. etc.
4. Summarmise the data between the population
5. Join the Datasetss with left join
```

```{r}

names(popdata) # Get the colum names of the popdata
age_categories <- unique(popdata$AG)

#Step 1
names(popdata)
popdata_2020 <- popdata[popdata$Time == 2020, ]
popdata_2020 <- popdata_2020 %>%
  mutate(
    age_group = case_when(
      AG %in% age_categories[1:5] ~ "Young",  # Age groups 0_to_4 until 20_to_24
      AG %in% age_categories[6:13] ~ "Economy Active",  # Age groups 25_to_29 until 60_to_64
      AG %in% age_categories[14:length(age_categories)] ~ "Aged",  # Age groups 65 and above
      TRUE ~ "Other"
    )
  )

# Step 2: Group by PA, SZ, and age_group, then sum the population
grouped_popdata <- popdata_2020 %>%
  group_by(PA, SZ, age_group) %>%
  summarise(total_population = sum(Pop, na.rm = TRUE)) %>%
  ungroup()

# Step 3: Pivot the data to have separate columns for Young, Economy Active, and Aged
pivoted_data <- grouped_popdata %>%
  pivot_wider(
    names_from = age_group,
    values_from = total_population,
    values_fill = 0  # Fill missing values with 0
  )

# Step 4: Calculate TOTAL and DEPENDENCY columns
final_data_2020 <- pivoted_data %>%
  mutate(
    TOTAL = Young + `Economy Active` + Aged,
    DEPENDENCY = (Young + Aged) / `Economy Active`
  )

# Ensure all PA and SZ values are uppercase for consistency
final_data_2020 <- final_data_2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper))

#Step 5: Merge the spatial data with the population data
mpsz_pop2020 <- left_join(mpsz, final_data_2020,
                          by = c("SUBZONE_N" = "SZ"))
```

# 3.0 Choropleth Mapping Geospatial Data Using *tmap*

This section provides an overview of key functions and concepts in `tmap`, focusing on the step-by-step process of building maps with progressively more complex elements. While the subsections dive into specific examples, this chapter highlights the core components used in choropleth mapping with `tmap`.

## 3.1 Quick Thematic Map: `qtm()`

The `qtm()` function provides a fast and simple way to create maps.

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, fill = "DEPENDENCY")
```

## 3.2 Customizing `tmap` elements

Explore the core `tmap` elements, including layers, aesthetics, and customization options.

### 3.2.1 Intro to TMAP

A basic map can be created with the following code:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

#### 3.2.1.1 Explanation of tmap Elements:

1.  **`tm_shape(mpsz_pop2020)`**: Defines the spatial object to be visualized, in this case, the `mpsz_pop2020` dataset.

2.  **`tm_fill()`**: Adds a fill layer to the map based on the `DEPENDENCY` variable.

    -   **`style = "quantile"`**: Classifies data into quantiles for better visual distribution.

    -   **`palette = "Blues"`**: Specifies the color scheme for the map, using a sequential palette.

    -   **`title = "Dependency ratio"`**: Sets the title for the legend.

3.  **`tm_layout()`**: Customizes the overall map layout.

    -   **`main.title` and its options**: Adds a centered title to the map with customized size and positioning.

    -   **`legend.height` and `legend.width`**: Adjusts the size of the legend.

    -   **`frame = TRUE`**: Adds a border around the map.

4.  **`tm_borders(alpha = 0.5)`**: Adds semi-transparent borders to the map, enhancing visual separation between areas.

5.  **`tm_compass(type = "8star", size = 2)`**: Adds a decorative compass with an eight-point star design to the map.

6.  **`tm_scale_bar()`**: Includes a scale bar, providing a reference for distance.

7.  **`tm_grid(alpha = 0.2)`**: Adds a faint grid to the background, aiding spatial orientation.

8.  **`tm_credits()`**: Displays credits and data sources in the bottom-left corner of the map.

#### 3.2.1.2 Additional T-Map Elements

-   **Dots and Symbols**: Use `tm_dots()` for point data and `tm_symbols()` for more complex symbol mapping.
-   **Lines**: Add linear features using `tm_lines()`, which allows customization of line color, width, and style.
-   **Text Labels**: The `tm_text()` function displays labels on the map, with options for adjusting text size, color, and positioning.
-   **Faceting (Small Multiples)**: `tm_facets()` is useful for comparing data across time periods, categories, or regions.
-   **Stacking Layers**: Multiple `tm_shape()` calls can overlay different spatial objects, allowing mixed data types.
-   **Raster Data**: For continuous surface data like heatmaps, use `tm_raster()`.
-   **Legends**: The `tm_legend()` function offers finer control over legend appearance.
-   **Interactive Viewing**: When building interactive maps, `tm_view()` supports zooming and panning for web applications.
-   **Graticules and Grid Lines**: Use `tm_graticules()` to add latitude and longitude lines for spatial orientation.

### 3.2.2 Drawing Maps

#### 3.2.2.1 Set up the base map

```{r}
tm_shape(mpsz_pop2020) + tm_polygons()
```

#### 3.2.2.2 Set up choropleth map with TMAP and TM_Polygons

```{r}
tm_shape(mpsz_pop2020) + tm_polygons("DEPENDENCY")
```

#### 3.2.2.3 Drawing a choropleth map using *tm_fill()* and \*tm_border()

```{r}
tm_shape(mpsz_pop2020)+ tm_fill("DEPENDENCY")
#With Borders
tm_shape(mpsz_pop2020)+tm_fill("DEPENDENCY") + tm_borders(lwd = 0.1,  alpha = 1)
```

## 3.3 data classification

### 3.3.1 Understanding Data Classification

Techniques for categorizing continuous or categorical data into classes for better readability. `tmap` offers ten classification methods, including `fixed`, `sd`, `equal`, `pretty` (default), `quantile`, `kmeans`, `hclust`, `bclust`, `fisher`, and `jenks`.

```{r}
map_quantile <-
  tm_shape(mpsz_pop2020) + 
    tm_fill("DEPENDENCY", n = 5, style = "quantile") + 
    tm_borders(alpha = 0.5) + 
    tm_layout(title = "quantile", legend.outside = TRUE, legend.outside.size = 0.2)

map_equal <- 
  tm_shape(mpsz_pop2020) + 
    tm_fill("DEPENDENCY", n = 5, style = "equal") + 
    tm_borders(alpha = 0.5) + 
    tm_layout(title = "equal", legend.outside = TRUE, legend.outside.size = 0.2)

map_pretty <-
  tm_shape(mpsz_pop2020) + 
    tm_fill("DEPENDENCY", n = 5, style = "pretty") + 
    tm_borders(alpha = 0.5) + 
    tm_layout(title = "pretty", legend.outside = TRUE, legend.outside.size = 0.2)

map_fisher <-
  tm_shape(mpsz_pop2020) + 
    tm_fill("DEPENDENCY", n = 5, style = "fisher") + 
    tm_borders(alpha = 0.5) + 
    tm_layout(title = "fisher", legend.outside = TRUE, legend.outside.size = 0.2)

map_kmeans <-
  tm_shape(mpsz_pop2020) + 
    tm_fill("DEPENDENCY", n = 5, style = "kmeans") + 
    tm_borders(alpha = 0.5) + 
    tm_layout(title = "kmeans", legend.outside = TRUE, legend.outside.size = 0.2)

# Arrange maps with all legends displayed outside and scaled
tmap_arrange(map_quantile, map_equal, map_pretty, 
             map_fisher, map_kmeans,
             ncol = 2, nrow = 3)
```

### 3.3.2 Classification and Data manipulation

Data lies all the time and it's no difference from Maps, be careful on what are the classification method that we choose! Notice the different when we have different number of classification size.

```{r}
# Quantile Maps
map_quantile_2 <-
  tm_shape(mpsz_pop2020) + 
    tm_fill("DEPENDENCY", n = 2, style = "quantile") + 
    tm_borders(alpha = 0.5) + 
    tm_layout(
      main.title = "Distribution Dependency - (Quantile - 2 classes)", 
      main.title.position = "center", 
      main.title.size = 0.5, 
      main.title.fontface = "bold", # Bold main title
      legend.outside = TRUE, 
      legend.outside.size = 0.2
    )

map_quantile_6 <-
  tm_shape(mpsz_pop2020) + 
    tm_fill("DEPENDENCY", n = 6, style = "quantile") + 
    tm_borders(alpha = 0.5) + 
    tm_layout(
      main.title = "Distribution Dependency - (Quantile - 6 classes)", 
      main.title.position = "center", 
      main.title.size = 0.5, 
      main.title.fontface = "bold", # Bold main title
      legend.outside = TRUE, 
      legend.outside.size = 0.2
    )

map_quantile_10 <-
  tm_shape(mpsz_pop2020) + 
    tm_fill("DEPENDENCY", n = 10, style = "quantile") + 
    tm_borders(alpha = 0.5) + 
    tm_layout(
      main.title = "Distribution Dependency - (Quantile - 10 classes)", 
      main.title.position = "center", 
      main.title.size = 0.5, 
      main.title.fontface = "bold", # Bold main title
      legend.outside = TRUE, 
      legend.outside.size = 0.2
    )

map_quantile_20 <-
  tm_shape(mpsz_pop2020) + 
    tm_fill("DEPENDENCY", n = 20, style = "quantile") + 
    tm_borders(alpha = 0.5) + 
    tm_layout(
      main.title = "Distribution Dependency - (Quantile - 20 classes)", 
      main.title.position = "center", 
      main.title.size = 0.5, 
      main.title.fontface = "bold", # Bold main title
      legend.outside = TRUE, 
      legend.outside.size = 0.2
    )

# Arrange the quantile maps in a grid
tmap_arrange(map_quantile_2, map_quantile_6, map_quantile_10, map_quantile_20,
             ncol = 2, nrow = 2)

# Equal Interval Maps
map_equal_2 <-
  tm_shape(mpsz_pop2020) + 
    tm_fill("DEPENDENCY", n = 2, style = "equal") + 
    tm_borders(alpha = 0.5) + 
    tm_layout(
      main.title = "Distribution Dependency - (Equal - 2 classes)", 
      main.title.position = "center", 
      main.title.size = 0.5, 
      main.title.fontface = "bold", # Bold main title
      legend.outside = TRUE, 
      legend.outside.size = 0.2
    )

map_equal_6 <-
  tm_shape(mpsz_pop2020) + 
    tm_fill("DEPENDENCY", n = 6, style = "equal") + 
    tm_borders(alpha = 0.5) + 
    tm_layout(
      main.title = "Distribution Dependency - (Equal - 6 classes)", 
      main.title.position = "center", 
      main.title.size = 0.5, 
      main.title.fontface = "bold", # Bold main title
      legend.outside = TRUE, 
      legend.outside.size = 0.2
    )

map_equal_10 <-
  tm_shape(mpsz_pop2020) + 
    tm_fill("DEPENDENCY", n = 10, style = "equal") + 
    tm_borders(alpha = 0.5) + 
    tm_layout(
      main.title = "Distribution Dependency - (Equal - 10 classes)", 
      main.title.position = "center", 
      main.title.size = 0.5, 
      main.title.fontface = "bold", # Bold main title
      legend.outside = TRUE, 
      legend.outside.size = 0.2
    )

map_equal_20 <-
  tm_shape(mpsz_pop2020) + 
    tm_fill("DEPENDENCY", n = 20, style = "equal") + 
    tm_borders(alpha = 0.5) + 
    tm_layout(
      main.title = "Distribution Dependency - (Equal - 20 classes)", 
      main.title.position = "center", 
      main.title.size = 0.5, 
      main.title.fontface = "bold", # Bold main title
      legend.outside = TRUE, 
      legend.outside.size = 0.2
    )

# Arrange the equal interval maps in a grid
tmap_arrange(map_equal_2, map_equal_6, map_equal_10, map_equal_20,
             ncol = 2, nrow = 2)
```

The choice between a smaller or larger `n` (number of classes) depends on the level of detail we want to show:

-   **Smaller `n` (e.g., 2 or 3 classes):** Best for broad, simplified comparisons or when you want to emphasize clear distinctions between categories. Useful for general audiences or when the data has clear breakpoints.

-   **Larger `n` (e.g., 10 or 20 classes):** Ideal for showing fine-grained differences and detecting subtle patterns. More useful when detailed analysis is needed, but it can overwhelm or confuse the viewer if not carefully chosen.

The decision is less about standard deviation and more about the purpose of your analysis: high `n` captures more detail, while low `n` simplifies the data.

#### 3.3.2.4 Custom Break

Alternatively, we can always just use summary function to get some descriptive statistic and set custom breakpoints.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5) 
```

## 3.4 color scheme

Choosing effective color schemes to enhance visual communication, with a focus on sequential, diverging, and categorical palettes.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5) +
  tm_layout(
      main.title = "Blue Color Scheme", 
      main.title.position = "center", 
      main.title.size = 1.5, 
      main.title.fontface = "bold", # Bold main title
      legend.outside = TRUE, 
      legend.outside.size = 0.2
    )

# Reverse color
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tm_layout(
      main.title = "Reverse Green Color Scheme", 
      main.title.position = "center", 
      main.title.size = 1.5, 
      main.title.fontface = "bold", # Bold main title
      legend.outside = TRUE, 
      legend.outside.size = 0.2
    )
```

## 3.5 map layouts

Customizing map layouts, including titles, legends, scale bars, and other cartographic elements.

```{r}

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)

# Map Style
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")

# tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))

```

## 3.6 drawing small multiple choropelth maps

Generate multiple maps in a single visual output to compare different variables or time periods. Small multiple maps (facet maps) allow visualization of how spatial patterns change across categories.

```{r,warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020)+
  tm_fill(c("Young", "Aged"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")


tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","Aged"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))


tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)

youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("Young", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("Aged", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)

```

## 3.7 mapping spatial object meeting a selection criterion

Filter and map spatial objects that satisfy specific conditions or criteria.

```{r, warning=FALSE, message=FALSE}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

# 4.0 Extra-Hands-On Exercise Let's have fun with Choropleth Mapping!

## 4.1 Age Cluster By Years and Sub zones.

Let's push the boundaries a bit! The goal is to visualize how the age clusters within each subzone have evolved over time. Although we haven't fully explored interactivity yet, we can take on the challenge of creating a video GIF that sequentially combines maps for each year. We'll wrap it up with a bird's-eye comparison of the different years side by side.

### 4.1.1 Preparing the data set

1.  We Need to read the data set in
2.  Find and cluster the age groups
    -   First Get all the age group categories
    -   Then cluster then to young, economy active and aged.
3.  Then we full join the map to their individual values.

```{r}
population_data <- read.csv("data/respopagesextod2011to2020.csv")
# Load the population data
# Categorize age groups
age_categories <- unique(popdata$AG)
population_data <- population_data %>%
  mutate(
    Age_Category = case_when(
      AG %in% age_categories[1:5] ~ "Young",  # Age groups 0_to_4 until 20_to_24
      AG %in% age_categories[6:13] ~ "Economy Active",  # Age groups 25_to_29 until 60_to_64
      AG %in% age_categories[14:length(age_categories)] ~ "Aged",  # Age groups 65 and above
      TRUE ~ "Other"
    )
  )
animation_maps <- list()
age_clusters <- unique(population_data$Age_Category)


aggregated_data <- population_data %>%
  group_by(SZ,Time,Age_Category) %>%
  summarise(Total_Population = sum(Pop, na.rm = TRUE)) %>%
  ungroup()

aggregated_data <- aggregated_data %>%
  mutate_at(.vars = vars(SZ), 
          .funs = list(toupper))

# Now join the aggregated population data into the expanded spatial data
final_map_data <- full_join(mpsz, aggregated_data, by = c("SUBZONE_N" = "SZ"))
```

#### 4.1.1.1 Difference in the number of MPZ's sub-zone versus Population's sub-zones.

While analyzing the data, we noticed that in the year 2020, there are more subzones than the usual 323 MPZ subzones. To address this, we can apply a simple filter to remove the excess subzones using the following code:

```{r}
unique_sz <- unique(aggregated_data$SZ)
unique_mpsz_sz <- unique(mpsz$SUBZONE_N)

# Find subzones in aggregated_data but not in mpsz
missing_in_mpsz <- setdiff(unique_sz, unique_mpsz_sz)
cat("Subzones in aggregated_data but not in mpsz:\n")
print(missing_in_mpsz)

# Find subzones in mpsz but not in aggregated_data
missing_in_aggregated <- setdiff(unique_mpsz_sz, unique_sz)
cat("Subzones in mpsz but not in aggregated_data:\n")
print(missing_in_aggregated)

common_subzones <- intersect(unique(mpsz$SUBZONE_N), unique(aggregated_data$SZ))
final_map_data <- final_map_data %>%
  filter(SUBZONE_N %in% common_subzones)
```

### 4.1.2 Generating the Gifs

#### 4.1.2.1 Logic and Steps

1.  Step 1; we categorize the data into different age clusters.
2.  For each cluster, we filter the dataset,
3.  generate a map for each year, and then consolidate them.
4.  Finally, we create the GIF to visualize the changes over time.

```{r, warning=FALSE, message=FALSE}
library(tmap)

age_clusters <- unique(final_map_data$Age_Category)

# Loop through each age category and generate a GIF
for (age_cluster in age_clusters) {
  # Filter the data for the current age category
  age_category_data <- final_map_data %>%
    filter(Age_Category == age_cluster)
  
  # List to store each year’s map for the GIF
  animation_frames <- list()
  
  # Loop through each year and generate frames
  years <- unique(age_category_data$Time)
  for (year in years) {
    year_data <- age_category_data %>%
      filter(Time == year)
    
    if (nrow(year_data) > 0) {  # Ensure there is data for the year
      # Create the map for the current year
      map <- tm_shape(year_data) +
        tm_polygons("Total_Population", style = "quantile", palette = "-RdYlBu", 
                    title = paste(age_cluster, "Population in", year)) +
        tm_layout(
          main.title = paste("Population Distribution for", age_cluster, "in", year),
          main.title.size = 1.0,  # Increase the title size for better visibility
          main.title.fontface = "bold",  # Make the title bold
          main.title.position = c("center", "top"),  # Center align the title at the top
          legend.position = c("center", "bottom"),  # Move the legend below the map
          legend.stack = "horizontal",  # Ensure the legend is stacked horizontally
          frame = FALSE
        )
      
      # Add the map to the list of frames
      animation_frames[[as.character(year)]] <- map
    }
  }
  
  # Dynamically create a single comparison map using tm_facets
  comparison_map <- tm_shape(age_category_data) +
    tm_polygons("Total_Population", style = "quantile", palette = "-RdYlBu", 
                title = paste(age_cluster, "Population Comparison (2011-2020)")) +
    tm_facets(by = "Time", ncol = 2, free.coords = FALSE) +  # Arrange facets in 2 columns
    tm_layout(
      main.title = paste("Population Comparison for", age_cluster, "Across All Years"),
      main.title.size = 2,  # Max out the title size for the final frame
      main.title.fontface = "bold",  # Make the title bold
      main.title.position = c("center", "top"),  # Center align the title at the top
      legend.position = c("center", "bottom"),  # Move the legend to the bottom
      legend.stack = "horizontal",  # Ensure the legend is stacked horizontally for better fit
      frame = FALSE
    )
  
  # Add the comparison map as the final frame multiple times to extend its duration
  for (i in 1:5) {  # Adding the final frame 5 times to simulate a 10-second delay (5 x 2 seconds)
    animation_frames[[paste0("comparison_", i)]] <- comparison_map
  }
  
  # Save the animation as a GIF with the correct delays
  tmap_animation(animation_frames, 
                 filename = paste0("population_time_series_", age_cluster, ".gif"), 
                 delay = 200,  # 2 seconds per frame (2000 ms)
                 width = 1500, height = 1200)  # Increase the size for better visibility
  
  cat(paste("Saved GIF for Age Category:", age_cluster, "\n"))
}

cat("All GIFs have been created.\n")

```

### 4.1.3 Visualization of the GIFS.

#### 4.1.3.1 Age

![](population_time_series_Aged.gif)

#### 4.1.3.2 Economic Active

![](population_time_series_Economy%20Active.gif)

#### 4.1.3.3 Young

![](population_time_series_Young.gif)
