---
title: "In Class Exercise 4: Spatio-Temporal Point Patterns Analysis"
author: "Jiale SO"
date: "September 09, 2024"
date-modified: "last-modified"
execute: 
  eval: true  
  echo: true
  freeze: true
  warning: false
  message: false
  cache: true
---

# 1.0 Introduction

A spatio-temporal point process (also called space-time or spatial-temporal point process) is a random collection of points, where each point represents the time and location of an event. Examples of events include incidence of disease, sightings or births of a species, or the occurrences of fires, earthquakes, lightning strikes, tsunamis, or volcanic eruptions.

The analysis of spatio-temporal point patterns is becoming increasingly necessary, given the rapid emergence of geographically and temporally indexed data in a wide range of fields. Several spatio-temporal point patterns analysis methods have been introduced and implemented in R in the last ten years. This chapter shows how various R packages can be combined to run a set of spatio-temporal point pattern analyses in a guided and intuitive way. A real world forest fire events in Kepulauan Bangka Belitung, Indonesia from 1st January 2023 to 31st December 2023 is used to illustrate the methods, procedures and interpretations.

## 1.1 Research Questions

The specific question we would like to answer is:

-   are the locations of forest fire in Kepulauan Bangka Belitung spatial and spatio-temporally independent?

-   if the answer is NO, where and when the observed forest fire locations tend to cluster?

# 2.0 Setup and Requirements

For the purpose of this study, five R packages will be used. They are:

-   `rgdal` for importing geospatial data in GIS file format such as shapefile into R and save them as Spatial\*DataFrame,

-   `maptools` for converting Spatial\* object into ppp object,

-   `raster` for handling raster data in R,

-   `sparr` provides function to estimate fixed and adaptive kernel-smoothed spatial relative risk surfaces via the density-ratio method and perform subsequent inference. fixed-bandwidth spati=temporal density and relative risk estimation is also supported

-   `spatstat` for performing Spatial Point Patterns Analysis such as kcross, Lcross, etc., and

-   `tmap` for producing cartographic quality thematic maps.

```{r}
pacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse, stpp, skimr)
```

# 3.0 Importing the Data Sets.

For the purpose of this exercise, two data sets are used, they are:

-   forestfires, a csv file provides locations of forest fire detected from the Moderate Resolution Imaging Spectroradiometer (MODIS) sensor data. The data are downloaded from [Fire Information for Resource Management System](https://firms.modaps.eosdis.nasa.gov/download/). For the purpose of this exercise, only forest fires within Kepulauan Bangka Belitung will be used.

-   Kepulauan_Bangka_Belitung, an ESRI shapefile showing the sub-district (i.e.Â [kelurahan](https://en.wikipedia.org/wiki/Villages_of_Indonesia)) boundary of Kepulauan Bangka Belitung. The data set was downloaded from [Indonesia Geospatial](https://www.indonesia-geospasial.com/2023/05/download-shapefile-batas-administrasi.html) portal. The original data covers the whole Indonesia. For the purpose of this exercise, only sub-districts within Kepulauan Bangka Belitung are extracted

kbb_sf \<- st_read(dsn = "data/rawdata", layer="Kepulauan_Bangka_Belitung") %\>%

st_union %\>%

st_zm(drop = TRUE, what = "ZM") %\>%

st_transform(crs = 32748)

::: panel-tabset
### Forest Fire

```{r}
forestFire_sf <- read_csv("data/rawdata/forestfires.csv") %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>%
  st_transform(crs = 32748)
```

```{r}
forestFire_sf <- forestFire_sf %>%
  mutate(DayofYear = yday(acq_date)) %>%
  mutate(Month_num = month(acq_date)) %>%
  mutate(Month_fac = month(acq_date, label = TRUE, abbr = FALSE)) 

```

### Kepulauan Shape File

Importing the study area.

```{r}
kbb_sf <- st_read(dsn = "data/rawdata", layer="Kepulauan_Bangka_Belitung") %>%
  st_union %>%
  st_zm(drop = TRUE, what = "ZM") %>%
  st_transform(crs = 32748)
```

Convert to own

```{r}
kbb_owin <- as.owin(kbb_sf)
kbb_owin

class(kbb_owin)
```
:::

# 4.0 Visualizing the Fire Points

```{r}
tm_shape(kbb_sf) +
  tm_polygons() +
  tm_shape(forestFire_sf) +
    tm_dots()
```

```{r}
tm_shape(kbb_sf) +
  tm_polygons() +
  tm_shape(forestFire_sf) +
    tm_dots(size = 0.1) +
  tm_facets(by="Month_fac",
            free.coords = FALSE,
            drop.units = TRUE)
```

```{r}
ggplot() +
  # Plot the map of Kepulauan Bangka Belitung
  geom_sf(data = kbb_sf, fill = "lightgreen", color = "darkgreen") +
  # Plot the forest fire points, colored by month
  geom_sf(data = forestFire_sf, aes(color = Month_fac), size = 2) +
  # Customize the theme
  theme_minimal() +
  labs(
    title = "Forest Fires in Kepulauan Bangka Belitung",
    subtitle = "Mapped by Month",
    color = "Month",
    caption = "Source: Forest Fire Data"
  ) +
  theme(
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5)
  )
```

# 5.0 Computing the STKDE By Month

## 5.1 Extracting forest fire by months

```{r}
fire_month <- forestFire_sf %>%
  dplyr::select(Month_num)

```

## 5.2 Creating the PPP

```{r}
fire_month_ppp <- as.ppp(fire_month)
fire_month_ppp
```

## 5.3 Including Owin Object

```{r}
fire_month_owin <- fire_month_ppp[kbb_owin]
head(fire_month_owin)
glimpse(fire_month_owin)
skim(fire_month_owin)
```

## 5.4 Computing Spatio-temporal KDE

`Spattemp.density()` of sparr package is used to compute the STYKDE.

```{r}
st_kde <- spattemp.density(fire_month_owin)
summary(st_kde)
```

## 5.5 Plotting the spatio-temporal KDE Object

plot for the KDE between july 2023 = december 2023.

```{r, fig.width=12, fig.height=10}

tims <- c(7,8,9,10,11,12)
 par(mfcol = c(2,3))
 for(i in tims) {
   plot(st_kde, i,
        override.par=FALSE,
        fix.range = TRUE,
        main = paste("KDE at month", i)
        )
 }
```

## 5.6 Plotting the STKDE Object By Day Of Year & Improved

```{r}
fire_yday_ppp <- forestFire_sf %>% 
  dplyr::select(DayofYear) %>%
  as.ppp()

fire_yday_owin <- fire_yday_ppp[kbb_owin]

```

```{r}
set.seed(1234)
BOOT.spattemp(fire_yday_owin) 

kde_yday <- spattemp.density(
  fire_yday_owin,
  h = 9000,
  lambda = 19)
summary(kde_yday)
```

### 5.6.1 Making An Animated Time Series Gif Across Days

First Make the data Streamlined into a Dataframe object

```{r}
# Assuming kde_yday$z.cond contains 343 frames (one for each day)
days <- 1:343  # Adjust to match the number of days

# Initialize an empty list to hold the data for each day
kde_data_list <- lapply(days, function(day) {
  # Extract the kernel density image for each day from z.cond
  kde_day <- as.data.frame(kde_yday$z.cond[[day]])  # Convert to a data frame (adjust if necessary)
  
  # Rename the columns appropriately (adjust based on the actual structure)
  colnames(kde_day) <- c("x", "y", "value")  # Ensure the correct column names for spatial data
  
  # Add a DayofYear column for animation
  kde_day$DayofYear <- day
  
  return(kde_day)
})

# Combine all days' data into a single data frame
kde_data <- do.call(rbind, kde_data_list)

# Check the structure of the combined data
str(kde_data)  # Ensure it contains x, y, value, and DayofYear columns
```

Then get plot data into gif.

```{r}
library(ggplot2)
library(gganimate)

# Create an animated plot using ggplot2
p <- ggplot(kde_data, aes(x = x, y = y, fill = value)) +
  geom_raster() +
  scale_fill_viridis_c() +  # Use a color scale for density values
  labs(title = "Kernel Density Estimation for Day {frame_time}",
       x = "Longitude", y = "Latitude") +
  coord_equal() +
  transition_time(DayofYear) +  # Animate by DayofYear (1 to 343)
  ease_aes('linear')

# Animate the plot and save as a GIF
animate(p, nframes = 343, fps = 10, width = 800, height = 600, renderer = gifski_renderer("kde_animation_343_days.gif"))

```

Results!

![](kde_animation_343_days.gif)
