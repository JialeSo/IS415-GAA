---
title: "In Class Exercise 12: Getting Data From APIs"
author: "Jiale SO"
date: "November 11, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# 1.0 Loading the R Packages

```{r}
pacman::p_load(tidyverse, sf, tmap, httr, performance, lubridate, DT)
```

# 2.0 Importing Data

The code chunk below imports multiple csv files in a specified folder and append them into a single tibble data frame.

```{r}
folder_path <- "data/aspatial"
file_list <- list.files(path = folder_path,
                        pattern = "^realis.*\\.csv$",
                        full.names = TRUE)

realis_data <- file_list %>%
  map_dfr(read_csv)
```

# 3.0 Wrangling Data

```{r}
condo_resale <- realis_data %>%
  mutate(`Sale Date` = dmy(`Sale Date`)) %>%
  filter(`Type of Sale` == "Resale" & `Property Type` == "Condominium")
```

# 4.0 Geocoding

## 4.1 Get Postal Code Details from API

Get all the postal codes

```{r}
postcodes <- unique(condo_resale$`Postal Code`)
```

Call One Map Gov to get the postal codes.

```{r, eval = FALSE}
url <- "https://onemap.gov.sg/api/common/elastic/search"
found <- data.frame()
not_found <- data.frame()

for (postcode in postcodes) {
  query <- list('searchVal' = postcode, 'returnGeom' = 'Y',
                'getAddrDetails' = 'Y', 'pageNum' = '1')
  res <- GET(url, query = query)
  
  # Check if the request was successful
  if (status_code(res) == 200) {
    res_content <- content(res)
    
    # Check if the 'found' key exists and is not zero
    if (!is.null(res_content$found) && res_content$found != 0) {
      found <- rbind(found, as.data.frame(content(res))[4:13])
    } else {
      not_found <- rbind(not_found, data.frame(postcode = postcode))
    }
  } else {
    warning(paste("Failed to retrieve data for postcode:", postcode))
  }
}
```

Write it to file for subsequent usage.

```{r, eval = FALSE}
write_rds(found, "data/aspatial/found.rds")
write_rds(not_found, "data/aspatial/not_found.rds")
```

```{r}
found <- read_rds("data/aspatial/found.rds")
not_found <- read_rds("data/aspatial/not_found.rds")
```

## 4.2 Data Cleaning to merge them up

```{r}
found <- found %>%
  select(c(6:8)) %>%
  rename(POSTAL = `results.POSTAL`,
          XCOORD = `results.X`,
          YCOORD = `results.Y`)
```

```{r}
condo_resale_geocoded = left_join(
  condo_resale, found,
  by = c('Postal Code' = 'POSTAL')
)
```

```{r}
condo_resale_sf <- st_as_sf(condo_resale_geocoded,
                            coords = c("XCOORD", "YCOORD"),
                            crs = 3414)
```

```{r}
overlapping_points <- condo_resale_sf %>%
  mutate(overlap = lengths(st_equals(.,.)) > 1)
```

```{r}
condo_resale_sf <- condo_resale_sf %>%
  st_jitter(amount = 2)
```

# 5.0 Results

```{r}
datatable(condo_resale_sf, options = list(pageLength = 100))

```
