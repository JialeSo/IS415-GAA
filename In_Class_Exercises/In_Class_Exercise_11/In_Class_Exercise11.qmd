---
title: "In Class Exercise11: Geospatial Data Science"
author: "Jiale SO"
date: "August 18, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# Getting Start an Loading Packages

```{r}
pacman::p_load(olsrr, ggstatsplot, sf, 
               tmap, tidyverse, gtsummary,
               performance, see, sfdep)
```

# Reading in the files

Use appropriate tidyverse and sf functions to import *Condo_resale_2015.csv*, *mpsz.rds* and *condo_resale_sf.rds* into RStudio environment.

```{r}
condo_resale <- read_csv("data/aspatial/Condo_resale_2015.csv")
mpsz <- read_rds("data/rds/mpsz.rds")
condo_resale_sf <- read_rds("data/rds/condo_resale_sf.rds")
```

# Correlation Analysis - ggstatsplot methods

Correlation matrix is an effective graphical method for checking if there are pair independent variables with high correlation. In the code chunk below, [`ggcorrmat()`](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/index.html) is used to plot the correlation matrix.

```{r, fig.width=10, fig.height=10}
ggcorrmat(condo_resale[, 5:23])
```

# Building a Hedonic Pricing Model by using Multiple Linear Regression Method

```{r, fig.width=10, fig.height=10}
condo_mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + 
                  AGE   + PROX_CBD + PROX_CHILDCARE + 
                  PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + 
                  PROX_HAWKER_MARKET    + PROX_KINDERGARTEN + 
                  PROX_MRT  + PROX_PARK + PROX_PRIMARY_SCH + 
                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL + 
                  PROX_SUPERMARKET + PROX_BUS_STOP + 
                  NO_Of_UNITS + FAMILY_FRIENDLY + 
                  FREEHOLD + LEASEHOLD_99YR, 
                data=condo_resale_sf)
summary(condo_mlr)
```

# Generating tidy linear regression report

```{r}
ols_regress(condo_mlr)
```

Stepwise regression is the step-by-step iterative construction of a regression model that involves the selection of independent variables to be used in a final model. It involves adding or removing potential explanatory variables in succession and testing for statistical significance after each iteration. Below usses the step forward

## Forward

```{r}
condo_fw_mlr <- ols_step_forward_p(
  condo_mlr,
  p_value = 0.05,
  details = FALSE
)
condo_fw_mlr
```

```{r, fig.width=10, fig.height=10}
plot(condo_fw_mlr)
```

## Backwards

```{r}
condo_bw_mlr <- ols_step_backward_p(
  condo_mlr,
  p_value = 0.05,
  details = FALSE
)
condo_fw_mlr
```

## **Both Direction**

```{r}
condo_bidirectional_mlr <- ols_step_both_p(
  condo_mlr,
  p_value = 0.05,
  details = FALSE
)
condo_fw_mlr
```

# Metric Comparison Between Models

In the code chunk below, [`compare_performance()`](https://easystats.github.io/performance/reference/compare_performance.html) of **performance** package is used to compare the performance of the models.

```{r}
metric <- compare_performance(condo_mlr,
                               condo_fw_mlr$model,
                               condo_bw_mlr$model,
                               condo_bidirectional_mlr$model)
```

In the code chunk below, `gsub()` is used to tidy the test value in *Name* field.

```{r}
metric$Name <- gsub(".*\\\\([a-zA-Z0-9_]+)\\\\, \\\\model\\\\.*", "\\1", metric$Name)
```

In the code chunk below, `plot()` of see package is used to plot a radar chart to compare the performance measures of the models.

```{r}
plot(metric)
```

# Visualising model parameters

```{r, fig.width=10, fig.height=10}
ggcoefstats(condo_bidirectional_mlr$model,
            sort = "ascending")
```

# Checking for multicollinearity

-   **Multicollinearity** is a statistical concept where two or more independent variables in a regression model are correlated.

-   A statistical technique called the **variance inflation factor (VIF)** can detect and measure the amount of collinearity in a multiple regression model.

-   VIF measures how much the variance of the estimated regression coefficients is inflated as compared to when the predictor variables are not linearly related.

-   Interpretation of VIF

    -   \< 5: low multicollinearity

    -   5-10: moderate multicollinearity

    -   \> 10: strong multicollineariy

```{r}
check_collinearity(condo_bidirectional_mlr$model)
```

```{r, fig.width=10, fig.height=5}
plot(check_collinearity(condo_bidirectional_mlr$model)) +
  theme(axis.text.x = element_text(
    angle = 45, hjust = 1))
```

# Linearity assumption test

In multiple linear regression, it is important for us to test the assumption that linearity and additivity of the relationship between dependent and independent variables.

In the code chunk below, the [`check_model()`](https://easystats.github.io/performance/reference/check_model.html) of **performance** package is used to perform linearity assumption test.

```{r}
out <- plot(check_model(condo_bidirectional_mlr$model, 
                        panel = FALSE))
out[[2]]
```

Figure above reveals that most of the data points are scattered around the 0 line, hence we can safely conclude that the relationships between the dependent variable and independent variables are linear.

# Normality assumption test

Multiple Linear Regression analysis assumes that **the residuals (the differences between observed and predicted values) are normally distributed**. This assumption can be assessed by using statistical graphics, or through statistical tests such as the Kolmogorov-Smirnov test.

Code chunk below uses [`check_normality`](https://easystats.github.io/performance/reference/check_normality.html) of *performance* package to perform normality assumption test.

```{r}
plot(check_normality(condo_bidirectional_mlr$model))
```

Figure above reveals that the residual of the multiple linear regression model (i.e. condo.mlr1) is resemble normal distribution.

# Checking of outliers

```{r}
outliers <- check_outliers(condo_bidirectional_mlr$model,
                           method = "cook")
outliers
```

```{r}
plot(check_outliers(condo_bidirectional_mlr$model,
                           method = "cook"))
```

# Spatial Non-stationary Assumption

The hedonic model we try to build are using geographically referenced attributes, hence it is also important for us to visual the residual of the hedonic pricing model.

-   Ho: The residuals are randomly distributed (also known as spatial stationary)

-   H1: The residuals are spatially non-stationary

## Step 1: Exporting Residual Hedonic Pricing as DF

```{r}
mlr_output <- as.data.frame(condo_fw_mlr$model$residuals) %>%
  rename(`FW_MLR_RES` = `condo_fw_mlr$model$residuals`)
```

## Step 2: Join newly Created DF with condo_resale_sf object

```{r}
condo_resale_sf <- cbind(condo_resale_sf, 
                        mlr_output$FW_MLR_RES) %>%
  rename(`MLR_RES` = `mlr_output.FW_MLR_RES`)
```

## Step 3: Visualizing the distribution of residual on interactive map

```{r, warning = FALSE}
tmap_mode("view")
tm_shape(mpsz)+
  tmap_options(check.and.fix = TRUE) +
  tm_polygons(alpha = 0.4) +
tm_shape(condo_resale_sf) +  
  tm_dots(col = "MLR_RES",
          alpha = 0.6,
          style="quantile") 
tmap_mode("plot")
```

# Spatial stationary test

To proof that our observation is indeed true, the Moran’s I test will be performed

## Step 1: compute the distance-based weight matrix by using dnearneigh() function of spdep.

```{r}
condo_resale_sf <- condo_resale_sf %>%
  mutate(nb = st_knn(geometry, k=6,
                     longlat = FALSE),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
```

## Step 2: [`global_moran_perm()`](https://sfdep.josiahparry.com/reference/global_moran_perm) of sfdep is used to perform global Moran permutation test.

```{r}
global_moran_perm(condo_resale_sf$MLR_RES, 
                  condo_resale_sf$nb, 
                  condo_resale_sf$wt, 
                  alternative = "two.sided", 
                  nsim = 99)
```

The Global Moran’s I test for residual spatial autocorrelation shows that **it’s p-value is less than the alpha value of 0.05**. Hence, we **reject the null hypothesis** that the residuals are randomly distributed.

Since the Observed Global Moran I = 0.32017 which is greater than 0, we can **infer** that the residuals resemble **cluster distribution**.
