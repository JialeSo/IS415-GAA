---
title: "In Class Exercise 10: Geospatial Data Science" 
author: "Jiale SO" 
date: "October 21, 2024" 
date-modified: "last-modified" 
execute:    
  eval: true   
  echo: true   
  freeze: true 
---


In Class 10:

# 1 Carrying on From Hands on 9 from onward.

Refer to this doc\
<https://r4gdsa.netlify.app/chap12.html#spatially-constrained-clustering-skater-approach>

## 1.1 Loading Packages


```{r}
pacman::p_load(spdep, tmap, sf, ClustGeo,ggpubr, cluster, factoextra, NbClust, heatmaply, corrplot, psych, tidyverse, GGally)
```


## **1.2 Read File from Hands on 9**


```{r}
shan_sf <- read_rds("data/rds/shan_sf.rds")
shan_ict <- read_rds("data/rds/shan_ict.rds") 
shan_sf_cluster <- read_rds("data/rds/shan_sf_cluster.rds")
proxmat <- read_rds("data/rds/proxmat.rds")
```


# 2 Conventional Hierarchical Clustering

::: panel-tabset
## Hierachcal Clustering


```{r}
proxmat <- dist(shan_ict, method = 'euclidean')
hclust_ward <- hclust(proxmat, method = 'ward.D')
groups <- as.factor(cutree(hclust_ward, k =6 ))
```


## Append to Geospatial Data


```{r}
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%   rename("CLUSTER" = "as.matrix.groups.") %>%   select(-c(3:4, 7:9)) %>%   rename(TS = TS.x)
```


## The Dendrogram


```{r}
plot(hclust_ward, cex = 0.6) 
rect.hclust(hclust_ward, k = 6, border = 2:5)
```


## ClusterMap


```{r}
qtm(shan_sf_cluster, "CLUSTER")
```

:::

# 3 Skater

## 3.1 Computing Spatial Distance Matrix

### Step 1: Computing Nearest Neighbours


```{r}
shan.nb <- poly2nb(shan_sf)
summary(shan.nb)
```


### Step 2: Visualizing the neighbours


```{r, warning = FALSE}
plot(st_geometry(shan_sf), border=grey(0.5))
pts <- st_coordinates(st_centroid(shan_sf))
plot(shan.nb,
      pts,
      col = 'blue',
      add = TRUE
      ) 
```


## Step 3: Computing Minimum Spanning Tree

::: panel-tabset
## Calculating Edge Costs


```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```


## Incorporating These costs into a weights object

Style have to have B,


```{r}
shan.w <- nb2listw(shan.nb,
                   lcosts,
                   style = "B")
summary(shan.w)
```


## Computing MST


```{r}
shan.mst <- mstree(shan.w)
```


## VIsualising MST


```{r}
plot(st_geometry((shan_sf), baorder=gray(0.5)))
plot.mst(shan.mst, pts,
         col="blue",
         cex.lab = 0.7, 
         cex.circles = 0.005,
         add= TRUE)
```

:::

### Computing Spatially Constraint Clusters using SKATER Method

::: panel-tabset
## Code


```{r}
skater.clust6 <- skater(edges = shan.mst[,1:2],
                        data = shan_ict,
                        method = "euclidean",
                        ncuts = 5
                        )
```


## Skater Tree


```{r, fig.width=10, fig.height=5, warning=FALSE, echo = FALSE}
plot(st_geometry(shan_sf), border = gray(0.5))

# Plot the skater clusters with better parameter alignment
plot(skater.clust6,
     coords = pts,                  # Specify coordinates
     cex.lab = 1,                   # Adjust label size for clarity
     groups.colors = c("red", "green", "blue", "brown", "pink"),
     cex.circles = 0.005,             # Adjust the circle size
     add = TRUE)           
```


## The Code to plot


```{r, fig.width=10, fig.height=5, warning=FALSE}
plot(st_geometry(shan_sf), border = gray(0.5))

# Plot the skater clusters with better parameter alignment
plot(skater.clust6,
     coords = pts,                  # Specify coordinates
     cex.lab = 1,                   # Adjust label size for clarity
     groups.colors = c("red", "green", "blue", "brown", "pink"),
     cex.circles = 0.005,             # Adjust the circle size
     add = TRUE)                    # Overlay on the previous plot
```

:::

## Computing Spatially Constrained Clusters using SKATER method

::: panel-tabset
## Plot


```{r}
groups_mat <- as.matrix(skater.clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename('skater_CLUSTER' = 'as.factor.groups_mat.')
qtm(shan_sf_spatialcluster, "skater_CLUSTER")
```


## Code


```{r}
groups_mat <- as.matrix(skater.clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename('skater_CLUSTER' = 'as.factor.groups_mat.')
qtm(shan_sf_spatialcluster, "skater_CLUSTER")
```

:::

# 4.0 Spatially Constrained Clustering : ClustGeo Method

## 4.1 Computing Spatial Distance Matrix

::: panel-tabset
## Computing Spatial Distance Matrix

ST_distance() of sf package is used to compute the distance matrix.


```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```


## The Cluster Graphs


```{r, echo = FALSE}
cr <- choicealpha(proxmat, distmat,
                  range.alpha = seq(0, 1, 0.1),
                  K=6, graph = TRUE
                  )
```


## The Code


```{r}
cr <- choicealpha(proxmat, distmat,
                  range.alpha = seq(0, 1, 0.1),
                  K=6, graph = TRUE
                  )
```


## Saving ClustGeoOutput


```{r}
clust6 <- hclustgeo(proxmat, distmat, alpha = 0.2)
groups <- as.factor(cutree(clust6, k=6))
shan_sf_clustGeo <- cbind( shan_sf, 
                            as.matrix(groups)) %>%
  rename("clustGEO" = "as.matrix.groups." )
```

:::

## 4.2 Visualizing the map


```{r}
qtm(shan_sf_clustGeo, "clustGEO")
```


# **5.0 Characterizing the clusters**


```{r, fig.width=10, fig.height=5, warning=FALSE}

ggparcoord(data = shan_sf_clustGeo,
           columns =  c(17:21),
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE,
           title = "Multiple parallel coordinates plots of ICT varaibles by Cluster") + 
  facet_grid(~ clustGEO) +
  theme(axis.text.x = element_text(angle = 30))
```

